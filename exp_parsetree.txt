start : program 	<Line: 1-22>(,,)
 program : unit  	<Line: 1-22>(,,)
  unit : func_definition  	<Line: 1-22>(,,)
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-22>(,,)
    type_specifier	: INT  	<Line: 1-1>(,,)
     INT : int 	<Line: 1>
    ID : main 	<Line: 1>
    LPAREN : ( 	<Line: 1>
    RPAREN : ) 	<Line: 1>
    compound_statement : LCURL statements RCURL   	<Line: 1-22>(,,L0)
     LCURL : { 	<Line: 1>
     statements : statements statement  	<Line: 2-21>(,,L0)
      statements : statements statement  	<Line: 2-20>(,,L1)
       statements : statements statement  	<Line: 2-19>(,,L2)
        statements : statements statement  	<Line: 2-18>(,,L3)
         statements : statements statement  	<Line: 2-17>(,,L4)
          statements : statements statement  	<Line: 2-16>(,,L5)
           statements : statements statement  	<Line: 2-15>(,,L6)
            statements : statements statement  	<Line: 2-7>(,,L7)
             statements : statements statement  	<Line: 2-6>(,,L8)
              statements : statements statement  	<Line: 2-5>(,,L9)
               statements : statements statement  	<Line: 2-4>(,,L10)
                statements : statements statement  	<Line: 2-3>(,,L11)
                 statements : statement   	<Line: 2-2>(,,L12)
                  statement : var_declaration 	<Line: 2-2>(,,L12)
                   var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 2-2>(,,L12)
                    type_specifier	: INT  	<Line: 2-2>(,,)
                     INT : int 	<Line: 2>
                    declaration_list : declaration_list COMMA ID   	<Line: 2-2>(,,)
                     declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 2-2>(,,)
                      declaration_list : declaration_list COMMA ID   	<Line: 2-2>(,,)
                       declaration_list : ID  	<Line: 2-2>(,,)
                        ID : a 	<Line: 2>
                       COMMA : , 	<Line: 2>
                       ID : b 	<Line: 2>
                      COMMA : ,  	<Line: 2>
                      ID : c 	<Line: 2>
                      LSQUARE : [ 	<Line: 2>
                      CONST_INT : 3 	<Line: 2>
                      RSQUARE : ] 	<Line: 2>
                     COMMA : , 	<Line: 2>
                     ID : x 	<Line: 2>
                    SEMICOLON : ; 	<Line: 2>
                 statement : expression_statement 	<Line: 3-3>(,,L11)
                  expression_statement : expression SEMICOLON 	<Line: 3-3>(,,L11)
                   expression : variable ASSIGNOP logic_expression 	<Line: 3-3>(,,L11)
                    variable : ID 	  	<Line: 3-3>(,,)
                     ID : a 	<Line: 3>
                    ASSIGNOP : = 	<Line: 3>
                    logic_expression : rel_expression 	  	<Line: 3-3>(,,L11)
                     rel_expression	: simple_expression  	<Line: 3-3>(,,L11)
                      simple_expression : term  	<Line: 3-3>(,,L11)
                       term : term MULOP unary_expression 	<Line: 3-3>(,,L11)
                        term : term MULOP unary_expression 	<Line: 3-3>(,,L11)
                         term :	unary_expression  	<Line: 3-3>(,,L11)
                          unary_expression : factor  	<Line: 3-3>(,,L11)
                           factor : CONST_INT  	<Line: 3-3>(,,L11)
                            CONST_INT : 1 	<Line: 3>
                         MULOP : * 	<Line: 3>
                         unary_expression : factor  	<Line: 3-3>(,,L11)
                          factor : LPAREN expression RPAREN 	<Line: 3-3>(,,L11)
                           LPAREN : ( 	<Line: 3>
                           expression 	: logic_expression	  	<Line: 3-3>(,,L11)
                            logic_expression : rel_expression 	  	<Line: 3-3>(,,L11)
                             rel_expression	: simple_expression  	<Line: 3-3>(,,L11)
                              simple_expression : simple_expression ADDOP term   	<Line: 3-3>(,,L11)
                               simple_expression : term  	<Line: 3-3>(,,L11)
                                term :	unary_expression  	<Line: 3-3>(,,L11)
                                 unary_expression : factor  	<Line: 3-3>(,,L11)
                                  factor : CONST_INT  	<Line: 3-3>(,,L11)
                                   CONST_INT : 2 	<Line: 3>
                               ADDOP : + 	<Line: 3>
                               term :	unary_expression  	<Line: 3-3>(,,L11)
                                unary_expression : factor  	<Line: 3-3>(,,L11)
                                 factor : CONST_INT  	<Line: 3-3>(,,L11)
                                  CONST_INT : 3 	<Line: 3>
                           RPAREN : ) 	<Line: 3>
                        MULOP : % 	<Line: 3>
                        unary_expression : factor  	<Line: 3-3>(,,L11)
                         factor : CONST_INT  	<Line: 3-3>(,,L11)
                          CONST_INT : 3 	<Line: 3>
                   SEMICOLON : ; 	<Line: 3>
                statement : expression_statement 	<Line: 4-4>(,,L10)
                 expression_statement : expression SEMICOLON 	<Line: 4-4>(,,L10)
                  expression : variable ASSIGNOP logic_expression 	<Line: 4-4>(,,L10)
                   variable : ID 	  	<Line: 4-4>(,,)
                    ID : b 	<Line: 4>
                   ASSIGNOP : = 	<Line: 4>
                   logic_expression : rel_expression 	  	<Line: 4-4>(,,L10)
                    rel_expression : simple_expression RELOP simple_expression 	<Line: 4-4>(L13,L14,L10)
                     simple_expression : term  	<Line: 4-4>(,,L10)
                      term :	unary_expression  	<Line: 4-4>(,,L10)
                       unary_expression : factor  	<Line: 4-4>(,,L10)
                        factor : CONST_INT  	<Line: 4-4>(,,L10)
                         CONST_INT : 1 	<Line: 4>
                     RELOP : < 	<Line: 4>
                     simple_expression : term  	<Line: 4-4>(,,L10)
                      term :	unary_expression  	<Line: 4-4>(,,L10)
                       unary_expression : factor  	<Line: 4-4>(,,L10)
                        factor : CONST_INT  	<Line: 4-4>(,,L10)
                         CONST_INT : 5 	<Line: 4>
                  SEMICOLON : ; 	<Line: 4>
               statement : expression_statement 	<Line: 5-5>(,,L9)
                expression_statement : expression SEMICOLON 	<Line: 5-5>(,,L9)
                 expression : variable ASSIGNOP logic_expression 	<Line: 5-5>(,,L9)
                  variable : ID LSQUARE expression RSQUARE 	<Line: 5-5>(,,)
                   ID : c 	<Line: 5>
                   LSQUARE : [ 	<Line: 5>
                   expression 	: logic_expression	  	<Line: 5-5>(,,)
                    logic_expression : rel_expression 	  	<Line: 5-5>(,,)
                     rel_expression	: simple_expression  	<Line: 5-5>(,,)
                      simple_expression : term  	<Line: 5-5>(,,)
                       term :	unary_expression  	<Line: 5-5>(,,)
                        unary_expression : factor  	<Line: 5-5>(,,)
                         factor : CONST_INT  	<Line: 5-5>(,,)
                          CONST_INT : 0 	<Line: 5>
                   RSQUARE : ] 	<Line: 5>
                  ASSIGNOP : = 	<Line: 5>
                  logic_expression : rel_expression 	  	<Line: 5-5>(,,L9)
                   rel_expression	: simple_expression  	<Line: 5-5>(,,L9)
                    simple_expression : term  	<Line: 5-5>(,,L9)
                     term :	unary_expression  	<Line: 5-5>(,,L9)
                      unary_expression : factor  	<Line: 5-5>(,,L9)
                       factor : CONST_INT  	<Line: 5-5>(,,L9)
                        CONST_INT : 2 	<Line: 5>
                 SEMICOLON : ; 	<Line: 5>
              statement : expression_statement 	<Line: 6-6>(,,L8)
               expression_statement : expression SEMICOLON 	<Line: 6-6>(,,L8)
                expression : variable ASSIGNOP logic_expression 	<Line: 6-6>(,,L8)
                 variable : ID 	  	<Line: 6-6>(,,)
                  ID : x 	<Line: 6>
                 ASSIGNOP : = 	<Line: 6>
                 logic_expression : rel_expression LOGICOP rel_expression  	<Line: 6-6>(L15,L16,L8)
                  rel_expression	: simple_expression  	<Line: 6-6>(fall,L16,L8)
                   simple_expression : term  	<Line: 6-6>(fall,L16,L8)
                    term :	unary_expression  	<Line: 6-6>(fall,L16,L8)
                     unary_expression : factor  	<Line: 6-6>(fall,L16,L8)
                      factor	: variable  	<Line: 6-6>(fall,L16,L8)
                       variable : ID 	  	<Line: 6-6>(,,)
                        ID : a 	<Line: 6>
                  LOGICOP : && 	<Line: 6>
                  rel_expression	: simple_expression  	<Line: 6-6>(L15,L16,L8)
                   simple_expression : term  	<Line: 6-6>(L15,L16,L8)
                    term :	unary_expression  	<Line: 6-6>(L15,L16,L8)
                     unary_expression : NOT unary_expression 	<Line: 6-6>(L15,L16,L8)
                      NOT : ! 	<Line: 6>
                      unary_expression : factor  	<Line: 6-6>(L16,L15,L8)
                       factor	: variable  	<Line: 6-6>(L16,L15,L8)
                        variable : ID 	  	<Line: 6-6>(,,)
                         ID : b 	<Line: 6>
                SEMICOLON : ; 	<Line: 6>
             statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 7-7>(,,L7)
              PRINTLN : println 	<Line: 7>
              LPAREN : ( 	<Line: 7>
              ID : x 	<Line: 7>
              RPAREN : ) 	<Line: 7>
              SEMICOLON : ; 	<Line: 7>
            statement : IF LPAREN expression RPAREN statement ELSE statement 	<Line: 9-15>(,,L6)
             IF : if 	<Line: 9>
             LPAREN : ( 	<Line: 9>
             expression 	: logic_expression	  	<Line: 9-9>(fall,L18,)
              logic_expression : rel_expression LOGICOP rel_expression  	<Line: 9-9>(fall,L18,)
               rel_expression	: simple_expression  	<Line: 9-9>(fall,L18,)
                simple_expression : term  	<Line: 9-9>(fall,L18,)
                 term :	unary_expression  	<Line: 9-9>(fall,L18,)
                  unary_expression : factor  	<Line: 9-9>(fall,L18,)
                   factor	: variable  	<Line: 9-9>(fall,L18,)
                    variable : ID 	  	<Line: 9-9>(,,)
                     ID : a 	<Line: 9>
               LOGICOP : && 	<Line: 9>
               rel_expression	: simple_expression  	<Line: 9-9>(fall,L18,)
                simple_expression : term  	<Line: 9-9>(fall,L18,)
                 term :	unary_expression  	<Line: 9-9>(fall,L18,)
                  unary_expression : factor  	<Line: 9-9>(fall,L18,)
                   factor	: variable  	<Line: 9-9>(fall,L18,)
                    variable : ID 	  	<Line: 9-9>(,,)
                     ID : b 	<Line: 9>
             RPAREN : ) 	<Line: 9>
             statement : compound_statement 	<Line: 10-13>(,,L6)
              compound_statement : LCURL statements RCURL   	<Line: 10-13>(,,L6)
               LCURL : { 	<Line: 10>
               statements : statements statement  	<Line: 11-12>(,,L6)
                statements : statement   	<Line: 11-11>(,,L19)
                 statement : expression_statement 	<Line: 11-11>(,,L19)
                  expression_statement : expression SEMICOLON 	<Line: 11-11>(,,L19)
                   expression 	: logic_expression	  	<Line: 11-11>(,,L19)
                    logic_expression : rel_expression 	  	<Line: 11-11>(,,L19)
                     rel_expression	: simple_expression  	<Line: 11-11>(,,L19)
                      simple_expression : term  	<Line: 11-11>(,,L19)
                       term :	unary_expression  	<Line: 11-11>(,,L19)
                        unary_expression : factor  	<Line: 11-11>(,,L19)
                         factor : variable INCOP  	<Line: 11-11>(,,L19)
                          variable : ID LSQUARE expression RSQUARE 	<Line: 11-11>(,,)
                           ID : c 	<Line: 11>
                           LSQUARE : [ 	<Line: 11>
                           expression 	: logic_expression	  	<Line: 11-11>(,,)
                            logic_expression : rel_expression 	  	<Line: 11-11>(,,)
                             rel_expression	: simple_expression  	<Line: 11-11>(,,)
                              simple_expression : term  	<Line: 11-11>(,,)
                               term :	unary_expression  	<Line: 11-11>(,,)
                                unary_expression : factor  	<Line: 11-11>(,,)
                                 factor : CONST_INT  	<Line: 11-11>(,,)
                                  CONST_INT : 0 	<Line: 11>
                           RSQUARE : ] 	<Line: 11>
                          INCOP : ++ 	<Line: 11>
                   SEMICOLON : ; 	<Line: 11>
                statement : expression_statement 	<Line: 12-12>(,,L6)
                 expression_statement : expression SEMICOLON 	<Line: 12-12>(,,L6)
                  expression : variable ASSIGNOP logic_expression 	<Line: 12-12>(,,L6)
                   variable : ID LSQUARE expression RSQUARE 	<Line: 12-12>(,,)
                    ID : c 	<Line: 12>
                    LSQUARE : [ 	<Line: 12>
                    expression 	: logic_expression	  	<Line: 12-12>(,,)
                     logic_expression : rel_expression 	  	<Line: 12-12>(,,)
                      rel_expression	: simple_expression  	<Line: 12-12>(,,)
                       simple_expression : term  	<Line: 12-12>(,,)
                        term :	unary_expression  	<Line: 12-12>(,,)
                         unary_expression : factor  	<Line: 12-12>(,,)
                          factor : CONST_INT  	<Line: 12-12>(,,)
                           CONST_INT : 1 	<Line: 12>
                    RSQUARE : ] 	<Line: 12>
                   ASSIGNOP : = 	<Line: 12>
                   logic_expression : rel_expression 	  	<Line: 12-12>(,,L6)
                    rel_expression	: simple_expression  	<Line: 12-12>(,,L6)
                     simple_expression : term  	<Line: 12-12>(,,L6)
                      term :	unary_expression  	<Line: 12-12>(,,L6)
                       unary_expression : factor  	<Line: 12-12>(,,L6)
                        factor : CONST_INT  	<Line: 12-12>(,,L6)
                         CONST_INT : 205 	<Line: 12>
                  SEMICOLON : ; 	<Line: 12>
               RCURL : } 	<Line: 13>
             ELSE : else 	<Line: 14>
             statement : expression_statement 	<Line: 15-15>(,,L6)
              expression_statement : expression SEMICOLON 	<Line: 15-15>(,,L6)
               expression : variable ASSIGNOP logic_expression 	<Line: 15-15>(,,L6)
                variable : ID LSQUARE expression RSQUARE 	<Line: 15-15>(,,)
                 ID : c 	<Line: 15>
                 LSQUARE : [ 	<Line: 15>
                 expression 	: logic_expression	  	<Line: 15-15>(,,)
                  logic_expression : rel_expression 	  	<Line: 15-15>(,,)
                   rel_expression	: simple_expression  	<Line: 15-15>(,,)
                    simple_expression : term  	<Line: 15-15>(,,)
                     term :	unary_expression  	<Line: 15-15>(,,)
                      unary_expression : factor  	<Line: 15-15>(,,)
                       factor : CONST_INT  	<Line: 15-15>(,,)
                        CONST_INT : 1 	<Line: 15>
                 RSQUARE : ] 	<Line: 15>
                ASSIGNOP : = 	<Line: 15>
                logic_expression : rel_expression 	  	<Line: 15-15>(,,L6)
                 rel_expression	: simple_expression  	<Line: 15-15>(,,L6)
                  simple_expression : term  	<Line: 15-15>(,,L6)
                   term :	unary_expression  	<Line: 15-15>(,,L6)
                    unary_expression : factor  	<Line: 15-15>(,,L6)
                     factor	: variable  	<Line: 15-15>(,,L6)
                      variable : ID LSQUARE expression RSQUARE 	<Line: 15-15>(,,)
                       ID : c 	<Line: 15>
                       LSQUARE : [ 	<Line: 15>
                       expression 	: logic_expression	  	<Line: 15-15>(,,)
                        logic_expression : rel_expression 	  	<Line: 15-15>(,,)
                         rel_expression	: simple_expression  	<Line: 15-15>(,,)
                          simple_expression : term  	<Line: 15-15>(,,)
                           term :	unary_expression  	<Line: 15-15>(,,)
                            unary_expression : factor  	<Line: 15-15>(,,)
                             factor : CONST_INT  	<Line: 15-15>(,,)
                              CONST_INT : 0 	<Line: 15>
                       RSQUARE : ] 	<Line: 15>
               SEMICOLON : ; 	<Line: 15>
           statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 16-16>(,,L5)
            PRINTLN : println 	<Line: 16>
            LPAREN : ( 	<Line: 16>
            ID : a 	<Line: 16>
            RPAREN : ) 	<Line: 16>
            SEMICOLON : ; 	<Line: 16>
          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 17-17>(,,L4)
           PRINTLN : println 	<Line: 17>
           LPAREN : ( 	<Line: 17>
           ID : b 	<Line: 17>
           RPAREN : ) 	<Line: 17>
           SEMICOLON : ; 	<Line: 17>
         statement : expression_statement 	<Line: 18-18>(,,L3)
          expression_statement : expression SEMICOLON 	<Line: 18-18>(,,L3)
           expression : variable ASSIGNOP logic_expression 	<Line: 18-18>(,,L3)
            variable : ID 	  	<Line: 18-18>(,,)
             ID : a 	<Line: 18>
            ASSIGNOP : = 	<Line: 18>
            logic_expression : rel_expression 	  	<Line: 18-18>(,,L3)
             rel_expression	: simple_expression  	<Line: 18-18>(,,L3)
              simple_expression : term  	<Line: 18-18>(,,L3)
               term :	unary_expression  	<Line: 18-18>(,,L3)
                unary_expression : factor  	<Line: 18-18>(,,L3)
                 factor	: variable  	<Line: 18-18>(,,L3)
                  variable : ID LSQUARE expression RSQUARE 	<Line: 18-18>(,,)
                   ID : c 	<Line: 18>
                   LSQUARE : [ 	<Line: 18>
                   expression 	: logic_expression	  	<Line: 18-18>(,,)
                    logic_expression : rel_expression 	  	<Line: 18-18>(,,)
                     rel_expression	: simple_expression  	<Line: 18-18>(,,)
                      simple_expression : term  	<Line: 18-18>(,,)
                       term :	unary_expression  	<Line: 18-18>(,,)
                        unary_expression : factor  	<Line: 18-18>(,,)
                         factor : CONST_INT  	<Line: 18-18>(,,)
                          CONST_INT : 0 	<Line: 18>
                   RSQUARE : ] 	<Line: 18>
           SEMICOLON : ; 	<Line: 18>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 19-19>(,,L2)
         PRINTLN : println 	<Line: 19>
         LPAREN : ( 	<Line: 19>
         ID : a 	<Line: 19>
         RPAREN : ) 	<Line: 19>
         SEMICOLON : ; 	<Line: 19>
       statement : expression_statement 	<Line: 20-20>(,,L1)
        expression_statement : expression SEMICOLON 	<Line: 20-20>(,,L1)
         expression : variable ASSIGNOP logic_expression 	<Line: 20-20>(,,L1)
          variable : ID 	  	<Line: 20-20>(,,)
           ID : b 	<Line: 20>
          ASSIGNOP : = 	<Line: 20>
          logic_expression : rel_expression 	  	<Line: 20-20>(,,L1)
           rel_expression	: simple_expression  	<Line: 20-20>(,,L1)
            simple_expression : term  	<Line: 20-20>(,,L1)
             term :	unary_expression  	<Line: 20-20>(,,L1)
              unary_expression : factor  	<Line: 20-20>(,,L1)
               factor	: variable  	<Line: 20-20>(,,L1)
                variable : ID LSQUARE expression RSQUARE 	<Line: 20-20>(,,)
                 ID : c 	<Line: 20>
                 LSQUARE : [ 	<Line: 20>
                 expression 	: logic_expression	  	<Line: 20-20>(,,)
                  logic_expression : rel_expression 	  	<Line: 20-20>(,,)
                   rel_expression	: simple_expression  	<Line: 20-20>(,,)
                    simple_expression : term  	<Line: 20-20>(,,)
                     term :	unary_expression  	<Line: 20-20>(,,)
                      unary_expression : factor  	<Line: 20-20>(,,)
                       factor : CONST_INT  	<Line: 20-20>(,,)
                        CONST_INT : 1 	<Line: 20>
                 RSQUARE : ] 	<Line: 20>
         SEMICOLON : ; 	<Line: 20>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 21-21>(,,L0)
       PRINTLN : println 	<Line: 21>
       LPAREN : ( 	<Line: 21>
       ID : b 	<Line: 21>
       RPAREN : ) 	<Line: 21>
       SEMICOLON : ; 	<Line: 21>
     RCURL : } 	<Line: 22>
