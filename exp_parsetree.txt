start : program 	<Line: 1-15>(,,)
 program : unit  	<Line: 1-15>(,,)
  unit : func_definition  	<Line: 1-15>(,,)
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-15>(,,)
    type_specifier	: INT  	<Line: 1-1>(,,)
     INT : int 	<Line: 1>
    ID : main 	<Line: 1>
    LPAREN : ( 	<Line: 1>
    RPAREN : ) 	<Line: 1>
    compound_statement : LCURL statements RCURL   	<Line: 1-15>(,,L0)
     LCURL : { 	<Line: 1>
     statements : statements statement  	<Line: 2-14>(,,L0)
      statements : statements statement  	<Line: 2-13>(,,L1)
       statements : statements statement  	<Line: 2-12>(,,L2)
        statements : statements statement  	<Line: 2-7>(,,L3)
         statements : statements statement  	<Line: 2-6>(,,L4)
          statements : statements statement  	<Line: 2-5>(,,L5)
           statements : statements statement  	<Line: 2-4>(,,L6)
            statements : statements statement  	<Line: 2-3>(,,L7)
             statements : statement   	<Line: 2-2>(,,L8)
              statement : var_declaration 	<Line: 2-2>(,,L8)
               var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 2-2>(,,L8)
                type_specifier	: INT  	<Line: 2-2>(,,)
                 INT : int 	<Line: 2>
                declaration_list : declaration_list COMMA ID   	<Line: 2-2>(,,)
                 declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 2-2>(,,)
                  declaration_list : declaration_list COMMA ID   	<Line: 2-2>(,,)
                   declaration_list : ID  	<Line: 2-2>(,,)
                    ID : a 	<Line: 2>
                   COMMA : , 	<Line: 2>
                   ID : b 	<Line: 2>
                  COMMA : ,  	<Line: 2>
                  ID : c 	<Line: 2>
                  LSQUARE : [ 	<Line: 2>
                  CONST_INT : 3 	<Line: 2>
                  RSQUARE : ] 	<Line: 2>
                 COMMA : , 	<Line: 2>
                 ID : x 	<Line: 2>
                SEMICOLON : ; 	<Line: 2>
             statement : expression_statement 	<Line: 3-3>(,,L7)
              expression_statement : expression SEMICOLON 	<Line: 3-3>(,,L7)
               expression : variable ASSIGNOP logic_expression 	<Line: 3-3>(,,L7)
                variable : ID 	  	<Line: 3-3>(,,)
                 ID : a 	<Line: 3>
                ASSIGNOP : = 	<Line: 3>
                logic_expression : rel_expression 	  	<Line: 3-3>(,,L7)
                 rel_expression	: simple_expression  	<Line: 3-3>(L11,L12,L7)
                  simple_expression : term  	<Line: 3-3>(,,L7)
                   term : term MULOP unary_expression 	<Line: 3-3>(,,L7)
                    term : term MULOP unary_expression 	<Line: 3-3>(,,L7)
                     term :	unary_expression  	<Line: 3-3>(,,L7)
                      unary_expression : factor  	<Line: 3-3>(,,L7)
                       factor : CONST_INT  	<Line: 3-3>(,,L7)
                        CONST_INT : 1 	<Line: 3>
                     MULOP : * 	<Line: 3>
                     unary_expression : factor  	<Line: 3-3>(,,L7)
                      factor : LPAREN expression RPAREN 	<Line: 3-3>(,,L7)
                       LPAREN : ( 	<Line: 3>
                       expression 	: logic_expression	  	<Line: 3-3>(,,L7)
                        logic_expression : rel_expression 	  	<Line: 3-3>(,,L7)
                         rel_expression	: simple_expression  	<Line: 3-3>(L9,L10,L7)
                          simple_expression : simple_expression ADDOP term   	<Line: 3-3>(,,L7)
                           simple_expression : term  	<Line: 3-3>(,,L7)
                            term :	unary_expression  	<Line: 3-3>(,,L7)
                             unary_expression : factor  	<Line: 3-3>(,,L7)
                              factor : CONST_INT  	<Line: 3-3>(,,L7)
                               CONST_INT : 2 	<Line: 3>
                           ADDOP : + 	<Line: 3>
                           term :	unary_expression  	<Line: 3-3>(,,L7)
                            unary_expression : factor  	<Line: 3-3>(,,L7)
                             factor : CONST_INT  	<Line: 3-3>(,,L7)
                              CONST_INT : 3 	<Line: 3>
                       RPAREN : ) 	<Line: 3>
                    MULOP : % 	<Line: 3>
                    unary_expression : factor  	<Line: 3-3>(,,L7)
                     factor : CONST_INT  	<Line: 3-3>(,,L7)
                      CONST_INT : 3 	<Line: 3>
               SEMICOLON : ; 	<Line: 3>
            statement : expression_statement 	<Line: 4-4>(,,L6)
             expression_statement : expression SEMICOLON 	<Line: 4-4>(,,L6)
              expression : variable ASSIGNOP logic_expression 	<Line: 4-4>(,,L6)
               variable : ID 	  	<Line: 4-4>(,,)
                ID : b 	<Line: 4>
               ASSIGNOP : = 	<Line: 4>
               logic_expression : rel_expression 	  	<Line: 4-4>(,,L6)
                rel_expression : simple_expression RELOP simple_expression 	<Line: 4-4>(L13,L14,L6)
                 simple_expression : term  	<Line: 4-4>(,,L6)
                  term :	unary_expression  	<Line: 4-4>(,,L6)
                   unary_expression : factor  	<Line: 4-4>(,,L6)
                    factor : CONST_INT  	<Line: 4-4>(,,L6)
                     CONST_INT : 1 	<Line: 4>
                 RELOP : < 	<Line: 4>
                 simple_expression : term  	<Line: 4-4>(,,L6)
                  term :	unary_expression  	<Line: 4-4>(,,L6)
                   unary_expression : factor  	<Line: 4-4>(,,L6)
                    factor : CONST_INT  	<Line: 4-4>(,,L6)
                     CONST_INT : 5 	<Line: 4>
              SEMICOLON : ; 	<Line: 4>
           statement : expression_statement 	<Line: 5-5>(,,L5)
            expression_statement : expression SEMICOLON 	<Line: 5-5>(,,L5)
             expression : variable ASSIGNOP logic_expression 	<Line: 5-5>(,,L5)
              variable : ID LSQUARE expression RSQUARE 	<Line: 5-5>(,,)
               ID : c 	<Line: 5>
               LSQUARE : [ 	<Line: 5>
               expression 	: logic_expression	  	<Line: 5-5>(,,)
                logic_expression : rel_expression 	  	<Line: 5-5>(,,)
                 rel_expression	: simple_expression  	<Line: 5-5>(L17,L18,)
                  simple_expression : term  	<Line: 5-5>(,,)
                   term :	unary_expression  	<Line: 5-5>(,,)
                    unary_expression : factor  	<Line: 5-5>(,,)
                     factor : CONST_INT  	<Line: 5-5>(,,)
                      CONST_INT : 0 	<Line: 5>
               RSQUARE : ] 	<Line: 5>
              ASSIGNOP : = 	<Line: 5>
              logic_expression : rel_expression 	  	<Line: 5-5>(,,L5)
               rel_expression	: simple_expression  	<Line: 5-5>(L15,L16,L5)
                simple_expression : term  	<Line: 5-5>(,,L5)
                 term :	unary_expression  	<Line: 5-5>(,,L5)
                  unary_expression : factor  	<Line: 5-5>(,,L5)
                   factor : CONST_INT  	<Line: 5-5>(,,L5)
                    CONST_INT : 2 	<Line: 5>
             SEMICOLON : ; 	<Line: 5>
          statement : expression_statement 	<Line: 6-6>(,,L4)
           expression_statement : expression SEMICOLON 	<Line: 6-6>(,,L4)
            expression : variable ASSIGNOP logic_expression 	<Line: 6-6>(,,L4)
             variable : ID 	  	<Line: 6-6>(,,)
              ID : x 	<Line: 6>
             ASSIGNOP : = 	<Line: 6>
             logic_expression : rel_expression LOGICOP rel_expression  	<Line: 6-6>(L19,L20,L4)
              rel_expression	: simple_expression  	<Line: 6-6>(fall,L20,L4)
               simple_expression : term  	<Line: 6-6>(,,L4)
                term :	unary_expression  	<Line: 6-6>(,,L4)
                 unary_expression : factor  	<Line: 6-6>(,,L4)
                  factor	: variable  	<Line: 6-6>(,,L4)
                   variable : ID 	  	<Line: 6-6>(,,)
                    ID : a 	<Line: 6>
              LOGICOP : && 	<Line: 6>
              rel_expression	: simple_expression  	<Line: 6-6>(L19,L20,L4)
               simple_expression : term  	<Line: 6-6>(,,L4)
                term :	unary_expression  	<Line: 6-6>(,,L4)
                 unary_expression : NOT unary_expression 	<Line: 6-6>(L21,L22,L4)
                  NOT : ! 	<Line: 6>
                  unary_expression : factor  	<Line: 6-6>(,,L4)
                   factor	: variable  	<Line: 6-6>(,,L4)
                    variable : ID 	  	<Line: 6-6>(,,)
                     ID : b 	<Line: 6>
            SEMICOLON : ; 	<Line: 6>
         statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 7-7>(,,L3)
          PRINTLN : println 	<Line: 7>
          LPAREN : ( 	<Line: 7>
          ID : x 	<Line: 7>
          RPAREN : ) 	<Line: 7>
          SEMICOLON : ; 	<Line: 7>
        statement : IF LPAREN expression RPAREN statement ELSE statement 	<Line: 9-12>(,,L2)
         IF : if 	<Line: 9>
         LPAREN : ( 	<Line: 9>
         expression 	: logic_expression	  	<Line: 9-9>(fall,L24,)
          logic_expression : rel_expression LOGICOP rel_expression  	<Line: 9-9>(fall,L24,)
           rel_expression	: simple_expression  	<Line: 9-9>(fall,L24,)
            simple_expression : term  	<Line: 9-9>(,,)
             term :	unary_expression  	<Line: 9-9>(,,)
              unary_expression : factor  	<Line: 9-9>(,,)
               factor	: variable  	<Line: 9-9>(,,)
                variable : ID 	  	<Line: 9-9>(,,)
                 ID : a 	<Line: 9>
           LOGICOP : && 	<Line: 9>
           rel_expression	: simple_expression  	<Line: 9-9>(fall,L24,)
            simple_expression : term  	<Line: 9-9>(,,)
             term :	unary_expression  	<Line: 9-9>(,,)
              unary_expression : factor  	<Line: 9-9>(,,)
               factor	: variable  	<Line: 9-9>(,,)
                variable : ID 	  	<Line: 9-9>(,,)
                 ID : b 	<Line: 9>
         RPAREN : ) 	<Line: 9>
         statement : expression_statement 	<Line: 10-10>(,,L2)
          expression_statement : expression SEMICOLON 	<Line: 10-10>(,,L2)
           expression 	: logic_expression	  	<Line: 10-10>(,,L2)
            logic_expression : rel_expression 	  	<Line: 10-10>(,,L2)
             rel_expression	: simple_expression  	<Line: 10-10>(L27,L28,L2)
              simple_expression : term  	<Line: 10-10>(,,L2)
               term :	unary_expression  	<Line: 10-10>(,,L2)
                unary_expression : factor  	<Line: 10-10>(,,L2)
                 factor : variable INCOP  	<Line: 10-10>(,,L2)
                  variable : ID LSQUARE expression RSQUARE 	<Line: 10-10>(,,)
                   ID : c 	<Line: 10>
                   LSQUARE : [ 	<Line: 10>
                   expression 	: logic_expression	  	<Line: 10-10>(,,)
                    logic_expression : rel_expression 	  	<Line: 10-10>(,,)
                     rel_expression	: simple_expression  	<Line: 10-10>(L25,L26,)
                      simple_expression : term  	<Line: 10-10>(,,)
                       term :	unary_expression  	<Line: 10-10>(,,)
                        unary_expression : factor  	<Line: 10-10>(,,)
                         factor : CONST_INT  	<Line: 10-10>(,,)
                          CONST_INT : 0 	<Line: 10>
                   RSQUARE : ] 	<Line: 10>
                  INCOP : ++ 	<Line: 10>
           SEMICOLON : ; 	<Line: 10>
         ELSE : else 	<Line: 11>
         statement : expression_statement 	<Line: 12-12>(,,L2)
          expression_statement : expression SEMICOLON 	<Line: 12-12>(,,L2)
           expression : variable ASSIGNOP logic_expression 	<Line: 12-12>(,,L2)
            variable : ID LSQUARE expression RSQUARE 	<Line: 12-12>(,,)
             ID : c 	<Line: 12>
             LSQUARE : [ 	<Line: 12>
             expression 	: logic_expression	  	<Line: 12-12>(,,)
              logic_expression : rel_expression 	  	<Line: 12-12>(,,)
               rel_expression	: simple_expression  	<Line: 12-12>(L33,L34,)
                simple_expression : term  	<Line: 12-12>(,,)
                 term :	unary_expression  	<Line: 12-12>(,,)
                  unary_expression : factor  	<Line: 12-12>(,,)
                   factor : CONST_INT  	<Line: 12-12>(,,)
                    CONST_INT : 1 	<Line: 12>
             RSQUARE : ] 	<Line: 12>
            ASSIGNOP : = 	<Line: 12>
            logic_expression : rel_expression 	  	<Line: 12-12>(,,L2)
             rel_expression	: simple_expression  	<Line: 12-12>(L31,L32,L2)
              simple_expression : term  	<Line: 12-12>(,,L2)
               term :	unary_expression  	<Line: 12-12>(,,L2)
                unary_expression : factor  	<Line: 12-12>(,,L2)
                 factor	: variable  	<Line: 12-12>(,,L2)
                  variable : ID LSQUARE expression RSQUARE 	<Line: 12-12>(,,)
                   ID : c 	<Line: 12>
                   LSQUARE : [ 	<Line: 12>
                   expression 	: logic_expression	  	<Line: 12-12>(,,)
                    logic_expression : rel_expression 	  	<Line: 12-12>(,,)
                     rel_expression	: simple_expression  	<Line: 12-12>(L29,L30,)
                      simple_expression : term  	<Line: 12-12>(,,)
                       term :	unary_expression  	<Line: 12-12>(,,)
                        unary_expression : factor  	<Line: 12-12>(,,)
                         factor : CONST_INT  	<Line: 12-12>(,,)
                          CONST_INT : 0 	<Line: 12>
                   RSQUARE : ] 	<Line: 12>
           SEMICOLON : ; 	<Line: 12>
       statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>(,,L1)
        PRINTLN : println 	<Line: 13>
        LPAREN : ( 	<Line: 13>
        ID : a 	<Line: 13>
        RPAREN : ) 	<Line: 13>
        SEMICOLON : ; 	<Line: 13>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 14-14>(,,L0)
       PRINTLN : println 	<Line: 14>
       LPAREN : ( 	<Line: 14>
       ID : b 	<Line: 14>
       RPAREN : ) 	<Line: 14>
       SEMICOLON : ; 	<Line: 14>
     RCURL : } 	<Line: 15>
