Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <LSQUARE> Lexeme [ found
Line# 1: Token <CONST_INT> Lexeme 9 found
Line# 1: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 1: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : unit 
Line# 2: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 2: Token <ID> Lexeme f found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 2: Token <ID> Lexeme x found
parameter_list  : type_specifier ID
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 4: Token <RCURL> Lexeme } found
compound_statement : LCURL RCURL 
	ScopeTable# 2
	11--> <x,INT> 
	ScopeTable# 1
	10--> <a,INT> 
	11--> <b,ARRAY> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition 
program : program unit 
Line# 6: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 6: Token <ID> Lexeme main found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <RPAREN> Lexeme ) found
Line# 6: Token <LCURL> Lexeme { found
Line# 7: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 7: Token <ID> Lexeme c found
Line# 7: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 7: Token <ID> Lexeme d found
Line# 7: Token <LSQUARE> Lexeme [ found
Line# 7: Token <CONST_INT> Lexeme 5 found
Line# 7: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 7: Token <COMMA> Lexeme , found
Line# 7: Token <ID> Lexeme t found
Line# 7: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration
statements : statement  
Line# 8: Token <ID> Lexeme c found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <MULOP> Lexeme % found
Line# 8: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 8: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 8: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor : LPAREN expression RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <MULOP> Lexeme * found
Line# 8: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 9: Token <PRINTLN> Lexeme println found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <ID> Lexeme c found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 10: Token <ID> Lexeme b found
Line# 10: Token <LSQUARE> Lexeme [ found
Line# 10: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 10: Token <ASSIGNOP> Lexeme = found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 10: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <MULOP> Lexeme * found
Line# 10: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 10: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term  
Line# 10: Token <CONST_INT> Lexeme 8 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor : LPAREN expression RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <MULOP> Lexeme % found
Line# 10: Token <CONST_INT> Lexeme 9 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 11: Token <ID> Lexeme t found
Line# 11: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 11: Token <ID> Lexeme b found
Line# 11: Token <LSQUARE> Lexeme [ found
Line# 11: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 11: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 11: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 12: Token <PRINTLN> Lexeme println found
Line# 12: Token <LPAREN> Lexeme ( found
Line# 12: Token <ID> Lexeme t found
Line# 12: Token <RPAREN> Lexeme ) found
Line# 12: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 13: Token <ID> Lexeme b found
Line# 13: Token <LSQUARE> Lexeme [ found
Line# 13: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 13: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 13: Token <ASSIGNOP> Lexeme = found
Line# 13: Token <ID> Lexeme b found
Line# 13: Token <LSQUARE> Lexeme [ found
Line# 13: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 13: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 13: Token <ADDOP> Lexeme + found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 13: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 13: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term  
Line# 13: Token <ID> Lexeme c found
Line# 13: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 14: Token <ID> Lexeme d found
Line# 14: Token <LSQUARE> Lexeme [ found
Line# 14: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 14: Token <ASSIGNOP> Lexeme = found
Line# 14: Token <ID> Lexeme b found
Line# 14: Token <LSQUARE> Lexeme [ found
Line# 14: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 14: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 15: Token <ID> Lexeme t found
Line# 15: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 15: Token <ID> Lexeme d found
Line# 15: Token <LSQUARE> Lexeme [ found
Line# 15: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 15: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 15: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 16: Token <PRINTLN> Lexeme println found
Line# 16: Token <LPAREN> Lexeme ( found
Line# 16: Token <ID> Lexeme t found
Line# 16: Token <RPAREN> Lexeme ) found
Line# 16: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 17: Token <ID> Lexeme d found
Line# 17: Token <LSQUARE> Lexeme [ found
Line# 17: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 17: Token <INCOP> Lexeme ++ found
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 18: Token <ID> Lexeme t found
Line# 18: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 18: Token <ID> Lexeme d found
Line# 18: Token <LSQUARE> Lexeme [ found
Line# 18: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 18: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 18: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 19: Token <PRINTLN> Lexeme println found
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <ID> Lexeme t found
Line# 19: Token <RPAREN> Lexeme ) found
Line# 19: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 20: Token <ID> Lexeme d found
Line# 20: Token <LSQUARE> Lexeme [ found
Line# 20: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
factor : variable DECOP
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 21: Token <ID> Lexeme d found
Line# 21: Token <LSQUARE> Lexeme [ found
Line# 21: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 21: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
factor : variable DECOP
unary_expression : factor 
term :	unary_expression 
Line# 21: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 22: Token <ID> Lexeme t found
Line# 22: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 22: Token <ID> Lexeme d found
Line# 22: Token <LSQUARE> Lexeme [ found
Line# 22: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 22: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 22: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 23: Token <PRINTLN> Lexeme println found
Line# 23: Token <LPAREN> Lexeme ( found
Line# 23: Token <ID> Lexeme t found
Line# 23: Token <RPAREN> Lexeme ) found
Line# 23: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 24: Token <ID> Lexeme d found
Line# 24: Token <LSQUARE> Lexeme [ found
Line# 24: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 24: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 24: Token <ASSIGNOP> Lexeme = found
Line# 24: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 24: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 25: Token <ID> Lexeme t found
Line# 25: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 25: Token <ID> Lexeme d found
Line# 25: Token <LSQUARE> Lexeme [ found
Line# 25: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 25: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE
Line# 25: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 26: Token <PRINTLN> Lexeme println found
Line# 26: Token <LPAREN> Lexeme ( found
Line# 26: Token <ID> Lexeme t found
Line# 26: Token <RPAREN> Lexeme ) found
Line# 26: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 28: Token <PRINTLN> Lexeme println found
Line# 28: Token <LPAREN> Lexeme ( found
Line# 28: Token <ID> Lexeme c found
Line# 28: Token <RPAREN> Lexeme ) found
Line# 28: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 29: Token <ID> Lexeme c found
Line# 29: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor : variable INCOP 
unary_expression : factor 
term :	unary_expression 
Line# 29: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 30: Token <PRINTLN> Lexeme println found
Line# 30: Token <LPAREN> Lexeme ( found
Line# 30: Token <ID> Lexeme c found
Line# 30: Token <RPAREN> Lexeme ) found
Line# 30: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 31: Token <ID> Lexeme c found
variable : ID 	 
factor : variable DECOP
unary_expression : factor 
term :	unary_expression 
Line# 31: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 32: Token <ID> Lexeme c found
variable : ID 	 
factor : variable DECOP
unary_expression : factor 
term :	unary_expression 
Line# 32: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 33: Token <ID> Lexeme c found
variable : ID 	 
factor : variable DECOP
unary_expression : factor 
term :	unary_expression 
Line# 33: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 34: Token <PRINTLN> Lexeme println found
Line# 34: Token <LPAREN> Lexeme ( found
Line# 34: Token <ID> Lexeme c found
Line# 34: Token <RPAREN> Lexeme ) found
Line# 34: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 47: Token <ID> Lexeme f found
Line# 47: Token <LPAREN> Lexeme ( found
Line# 47: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 47: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 47: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 47: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 47: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 51: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 3
	1--> <c,INT> 
	2--> <d,ARRAY> 
	7--> <t,INT> 
	ScopeTable# 1
	4--> <f,FUNCTION,VOID> 
	10--> <a,INT> 
	11--> <b,ARRAY> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition 
program : program unit 
Line# 52: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 52: Token <ID> Lexeme g1 found
Line# 52: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 52: Token <ID> Lexeme g2 found
Line# 52: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : program unit 
start : program
Total Lines: 58
Total Errors: 0
