Line# 1: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 1: Token <ID> Lexeme cc found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
unit : func_declaration 
program : unit 
Line# 3: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 3: Token <ID> Lexeme d found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 3: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
unit : func_declaration 
program : program unit 
Line# 4: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 4: Token <ID> Lexeme e found
Line# 4: Token <LPAREN> Lexeme ( found
Line# 4: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 4: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 4: Token <RPAREN> Lexeme ) found
Line# 4: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
unit : func_declaration 
program : program unit 
Line# 6: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 6: Token <ID> Lexeme f found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 6: Token <ID> Lexeme x found
parameter_list  : type_specifier ID
Line# 6: Token <COMMA> Lexeme , found
Line# 6: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 6: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 6: Token <RPAREN> Lexeme ) found
Line# 6: Token <LCURL> Lexeme { found
Line# 7: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 7: Token <ID> Lexeme p found
Line# 7: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 7: Token <ID> Lexeme q found
Line# 7: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 7: Token <ID> Lexeme r found
Line# 7: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration
statements : statement  
Line# 8: Token <ID> Lexeme x found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 8: Token <ID> Lexeme x found
Line# 8: Token <MULOP> Lexeme * found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 8: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 8: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 9: Token <PRINTLN> Lexeme println found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <ID> Lexeme x found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 11: Token <ID> Lexeme cc found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme b found
Line# 11: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 11: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 12: Token <ID> Lexeme p found
Line# 12: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 12: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 12: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 13: Token <ID> Lexeme q found
Line# 13: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 13: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 13: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 14: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 2
	3--> <p,INT> 
	4--> <q,INT> 
	5--> <r,INT> 
	11--> <x,INT> <b,INT> 
	ScopeTable# 1
	1--> <cc,FUNCTION,VOID> 
	2--> <d,FUNCTION,VOID> 
	3--> <e,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition 
program : program unit 
Line# 16: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 16: Token <ID> Lexeme cc found
Line# 16: Token <LPAREN> Lexeme ( found
Line# 16: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 16: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 16: Token <RPAREN> Lexeme ) found
Line# 16: Token <LCURL> Lexeme { found
Line# 17: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 17: Token <ID> Lexeme x found
Line# 17: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 17: Token <ID> Lexeme y found
Line# 17: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration
statements : statement  
Line# 18: Token <ID> Lexeme a found
Line# 18: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 18: Token <ID> Lexeme a found
Line# 18: Token <MULOP> Lexeme * found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 18: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 18: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 19: Token <PRINTLN> Lexeme println found
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <ID> Lexeme a found
Line# 19: Token <RPAREN> Lexeme ) found
Line# 19: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 20: Token <ID> Lexeme d found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme a found
Line# 20: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 21: Token <ID> Lexeme y found
Line# 21: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 21: Token <CONST_INT> Lexeme 11 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 21: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 22: Token <PRINTLN> Lexeme println found
Line# 22: Token <LPAREN> Lexeme ( found
Line# 22: Token <ID> Lexeme y found
Line# 22: Token <RPAREN> Lexeme ) found
Line# 22: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 23: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 3
	1--> <y,INT> 
	10--> <a,INT> 
	11--> <x,INT> 
	ScopeTable# 1
	1--> <cc,FUNCTION,VOID> 
	2--> <d,FUNCTION,VOID> 
	3--> <e,FUNCTION,VOID> 
	4--> <f,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition 
program : program unit 
Line# 24: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 24: Token <ID> Lexeme d found
Line# 24: Token <LPAREN> Lexeme ( found
Line# 24: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 24: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 24: Token <RPAREN> Lexeme ) found
Line# 24: Token <LCURL> Lexeme { found
Line# 25: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 25: Token <ID> Lexeme q found
Line# 25: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 25: Token <ID> Lexeme s found
Line# 25: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration
statements : statement  
Line# 26: Token <ID> Lexeme a found
Line# 26: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 26: Token <ID> Lexeme a found
Line# 26: Token <MULOP> Lexeme * found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 26: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 26: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 27: Token <PRINTLN> Lexeme println found
Line# 27: Token <LPAREN> Lexeme ( found
Line# 27: Token <ID> Lexeme a found
Line# 27: Token <RPAREN> Lexeme ) found
Line# 27: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 28: Token <ID> Lexeme e found
Line# 28: Token <LPAREN> Lexeme ( found
Line# 28: Token <ID> Lexeme a found
Line# 28: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 29: Token <PRINTLN> Lexeme println found
Line# 29: Token <LPAREN> Lexeme ( found
Line# 29: Token <ID> Lexeme a found
Line# 29: Token <RPAREN> Lexeme ) found
Line# 29: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 30: Token <ID> Lexeme s found
Line# 30: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 30: Token <CONST_INT> Lexeme 55 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 30: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 31: Token <PRINTLN> Lexeme println found
Line# 31: Token <LPAREN> Lexeme ( found
Line# 31: Token <ID> Lexeme s found
Line# 31: Token <RPAREN> Lexeme ) found
Line# 31: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 34: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 4
	4--> <q,INT> 
	6--> <s,INT> 
	10--> <a,INT> 
	ScopeTable# 1
	1--> <cc,FUNCTION,VOID> 
	2--> <d,FUNCTION,VOID> 
	3--> <e,FUNCTION,VOID> 
	4--> <f,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition 
program : program unit 
Line# 35: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 35: Token <ID> Lexeme testing found
Line# 35: Token <LPAREN> Lexeme ( found
Line# 35: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 35: Token <ID> Lexeme z found
parameter_list  : type_specifier ID
Line# 35: Token <COMMA> Lexeme , found
Line# 35: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 35: Token <ID> Lexeme y found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 35: Token <RPAREN> Lexeme ) found
Line# 35: Token <LCURL> Lexeme { found
Line# 38: Token <RCURL> Lexeme } found
compound_statement : LCURL RCURL 
	ScopeTable# 5
	1--> <y,INT> 
	2--> <z,INT> 
	ScopeTable# 1
	1--> <cc,FUNCTION,VOID> 
	2--> <d,FUNCTION,VOID> 
	3--> <e,FUNCTION,VOID> 
	4--> <f,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition 
program : program unit 
Line# 40: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 40: Token <ID> Lexeme e found
Line# 40: Token <LPAREN> Lexeme ( found
Line# 40: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 40: Token <ID> Lexeme z found
parameter_list  : type_specifier ID
Line# 40: Token <RPAREN> Lexeme ) found
Line# 40: Token <LCURL> Lexeme { found
Line# 41: Token <ID> Lexeme z found
Line# 41: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 41: Token <ID> Lexeme z found
Line# 41: Token <MULOP> Lexeme * found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 41: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement  
Line# 42: Token <PRINTLN> Lexeme println found
Line# 42: Token <LPAREN> Lexeme ( found
Line# 42: Token <ID> Lexeme z found
Line# 42: Token <RPAREN> Lexeme ) found
Line# 42: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 43: Token <ID> Lexeme testing found
Line# 43: Token <LPAREN> Lexeme ( found
Line# 43: Token <ID> Lexeme z found
Line# 43: Token <MULOP> Lexeme * found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 43: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 43: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 43: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 43: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 43: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 45: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 6
	2--> <z,INT> 
	ScopeTable# 1
	1--> <cc,FUNCTION,VOID> 
	2--> <d,FUNCTION,VOID> 
	3--> <e,FUNCTION,VOID> 
	4--> <f,FUNCTION,VOID> <testing,FUNCTION,VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition 
program : program unit 
Line# 47: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 47: Token <ID> Lexeme a found
Line# 47: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 47: Token <ID> Lexeme b found
Line# 47: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : program unit 
Line# 48: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 48: Token <ID> Lexeme k found
Line# 48: Token <LPAREN> Lexeme ( found
Line# 48: Token <RPAREN> Lexeme ) found
Line# 48: Token <LCURL> Lexeme { found
Line# 49: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 49: Token <ID> Lexeme c found
Line# 49: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration
statements : statement  
Line# 51: Token <ID> Lexeme c found
Line# 51: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 51: Token <CONST_INT> Lexeme 17 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 51: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 52: Token <PRINTLN> Lexeme println found
Line# 52: Token <LPAREN> Lexeme ( found
Line# 52: Token <ID> Lexeme c found
Line# 52: Token <RPAREN> Lexeme ) found
Line# 52: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 53: Token <ID> Lexeme a found
Line# 53: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 53: Token <CONST_INT> Lexeme 26 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 53: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 54: Token <ID> Lexeme f found
Line# 54: Token <LPAREN> Lexeme ( found
Line# 54: Token <CONST_INT> Lexeme 13 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 54: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 54: Token <ID> Lexeme a found
Line# 54: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 54: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 55: Token <PRINTLN> Lexeme println found
Line# 55: Token <LPAREN> Lexeme ( found
Line# 55: Token <ID> Lexeme a found
Line# 55: Token <RPAREN> Lexeme ) found
Line# 55: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 56: Token <ID> Lexeme b found
Line# 56: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 56: Token <ID> Lexeme a found
Line# 56: Token <MULOP> Lexeme % found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 56: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression : factor 
term : term MULOP unary_expression
Line# 56: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 59: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 7
	1--> <c,INT> 
	ScopeTable# 1
	1--> <cc,FUNCTION,VOID> 
	2--> <d,FUNCTION,VOID> 
	3--> <e,FUNCTION,VOID> 
	4--> <f,FUNCTION,VOID> <testing,FUNCTION,VOID> 
	10--> <a,INT> 
	11--> <b,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition 
program : program unit 
Line# 60: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 60: Token <ID> Lexeme main found
Line# 60: Token <LPAREN> Lexeme ( found
Line# 60: Token <RPAREN> Lexeme ) found
Line# 60: Token <LCURL> Lexeme { found
Line# 61: Token <ID> Lexeme k found
Line# 61: Token <LPAREN> Lexeme ( found
Line# 61: Token <RPAREN> Lexeme ) found
argument_list : 
factor : ID LPAREN argument_list RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 61: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement  
Line# 62: Token <PRINTLN> Lexeme println found
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <ID> Lexeme b found
Line# 62: Token <RPAREN> Lexeme ) found
Line# 62: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 63: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 8
	ScopeTable# 1
	1--> <cc,FUNCTION,VOID> 
	2--> <d,FUNCTION,VOID> 
	3--> <e,FUNCTION,VOID> 
	4--> <f,FUNCTION,VOID> <testing,FUNCTION,VOID> 
	9--> <k,FUNCTION,VOID> 
	10--> <a,INT> 
	11--> <b,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition 
program : program unit 
start : program
Total Lines: 63
Total Errors: 3
