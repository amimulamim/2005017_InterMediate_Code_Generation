start : program 	<Line: 1-12>(,,)
 program : program unit  	<Line: 1-12>(,,)
  program : unit  	<Line: 1-1>(,,)
   unit : var_declaration   	<Line: 1-1>(,,)
    var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 1-1>(,,)
     type_specifier	: INT  	<Line: 1-1>(,,)
      INT : int 	<Line: 1>
     declaration_list : declaration_list COMMA ID   	<Line: 1-1>(,,)
      declaration_list : declaration_list COMMA ID   	<Line: 1-1>(,,)
       declaration_list : ID  	<Line: 1-1>(,,)
        ID : a 	<Line: 1>
       COMMA : , 	<Line: 1>
       ID : b 	<Line: 1>
      COMMA : , 	<Line: 1>
      ID : c 	<Line: 1>
     SEMICOLON : ; 	<Line: 1>
  unit : func_definition  	<Line: 2-12>(,,)
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-12>(,,)
    type_specifier	: INT  	<Line: 2-2>(,,)
     INT : int 	<Line: 2>
    ID : main 	<Line: 2>
    LPAREN : ( 	<Line: 2>
    RPAREN : ) 	<Line: 2>
    compound_statement : LCURL statements RCURL   	<Line: 3-12>(,,L0)
     LCURL : { 	<Line: 3>
     statements : statements statement  	<Line: 4-11>(,,L0)
      statements : statements statement  	<Line: 4-10>(,,L1)
       statements : statements statement  	<Line: 4-9>(,,L2)
        statements : statements statement  	<Line: 4-8>(,,L3)
         statements : statements statement  	<Line: 4-7>(,,L4)
          statements : statements statement  	<Line: 4-6>(,,L5)
           statements : statements statement  	<Line: 4-5>(,,L6)
            statements : statement   	<Line: 4-4>(,,L7)
             statement : var_declaration 	<Line: 4-4>(,,L7)
              var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 4-4>(,,L7)
               type_specifier	: INT  	<Line: 4-4>(,,)
                INT : int 	<Line: 4>
               declaration_list : declaration_list COMMA ID   	<Line: 4-4>(,,)
                declaration_list : declaration_list COMMA ID   	<Line: 4-4>(,,)
                 declaration_list : ID  	<Line: 4-4>(,,)
                  ID : i 	<Line: 4>
                 COMMA : , 	<Line: 4>
                 ID : j 	<Line: 4>
                COMMA : , 	<Line: 4>
                ID : k 	<Line: 4>
               SEMICOLON : ; 	<Line: 4>
            statement : expression_statement 	<Line: 5-5>(,,L6)
             expression_statement : expression SEMICOLON 	<Line: 5-5>(,,L6)
              expression : variable ASSIGNOP logic_expression 	<Line: 5-5>(,,L6)
               variable : ID 	  	<Line: 5-5>(,,)
                ID : i 	<Line: 5>
               ASSIGNOP : = 	<Line: 5>
               logic_expression : rel_expression 	  	<Line: 5-5>(,,L6)
                rel_expression	: simple_expression  	<Line: 5-5>(,,L6)
                 simple_expression : term  	<Line: 5-5>(,,L6)
                  term :	unary_expression  	<Line: 5-5>(,,L6)
                   unary_expression : factor  	<Line: 5-5>(,,L6)
                    factor : CONST_INT  	<Line: 5-5>(,,L6)
                     CONST_INT : 2 	<Line: 5>
              SEMICOLON : ; 	<Line: 5>
           statement : expression_statement 	<Line: 6-6>(,,L5)
            expression_statement : expression SEMICOLON 	<Line: 6-6>(,,L5)
             expression : variable ASSIGNOP logic_expression 	<Line: 6-6>(,,L5)
              variable : ID 	  	<Line: 6-6>(,,)
               ID : j 	<Line: 6>
              ASSIGNOP : = 	<Line: 6>
              logic_expression : rel_expression 	  	<Line: 6-6>(,,L5)
               rel_expression	: simple_expression  	<Line: 6-6>(,,L5)
                simple_expression : term  	<Line: 6-6>(,,L5)
                 term :	unary_expression  	<Line: 6-6>(,,L5)
                  unary_expression : factor  	<Line: 6-6>(,,L5)
                   factor : CONST_INT  	<Line: 6-6>(,,L5)
                    CONST_INT : 4 	<Line: 6>
             SEMICOLON : ; 	<Line: 6>
          statement : expression_statement 	<Line: 7-7>(,,L4)
           expression_statement : expression SEMICOLON 	<Line: 7-7>(,,L4)
            expression : variable ASSIGNOP logic_expression 	<Line: 7-7>(,,L4)
             variable : ID 	  	<Line: 7-7>(,,)
              ID : c 	<Line: 7>
             ASSIGNOP : = 	<Line: 7>
             logic_expression : rel_expression 	  	<Line: 7-7>(,,L4)
              rel_expression	: simple_expression  	<Line: 7-7>(,,L4)
               simple_expression : term  	<Line: 7-7>(,,L4)
                term :	unary_expression  	<Line: 7-7>(,,L4)
                 unary_expression : factor  	<Line: 7-7>(,,L4)
                  factor : CONST_INT  	<Line: 7-7>(,,L4)
                   CONST_INT : 3 	<Line: 7>
            SEMICOLON : ; 	<Line: 7>
         statement : expression_statement 	<Line: 8-8>(,,L3)
          expression_statement : expression SEMICOLON 	<Line: 8-8>(,,L3)
           expression : variable ASSIGNOP logic_expression 	<Line: 8-8>(,,L3)
            variable : ID 	  	<Line: 8-8>(,,)
             ID : a 	<Line: 8>
            ASSIGNOP : = 	<Line: 8>
            logic_expression : rel_expression 	  	<Line: 8-8>(,,L3)
             rel_expression	: simple_expression  	<Line: 8-8>(,,L3)
              simple_expression : term  	<Line: 8-8>(,,L3)
               term : term MULOP unary_expression 	<Line: 8-8>(,,L3)
                term :	unary_expression  	<Line: 8-8>(,,L3)
                 unary_expression : factor  	<Line: 8-8>(,,L3)
                  factor : LPAREN expression RPAREN 	<Line: 8-8>(,,L3)
                   LPAREN : ( 	<Line: 8>
                   expression 	: logic_expression	  	<Line: 8-8>(,,L3)
                    logic_expression : rel_expression 	  	<Line: 8-8>(,,L3)
                     rel_expression	: simple_expression  	<Line: 8-8>(,,L3)
                      simple_expression : simple_expression ADDOP term   	<Line: 8-8>(,,L3)
                       simple_expression : term  	<Line: 8-8>(,,L3)
                        term :	unary_expression  	<Line: 8-8>(,,L3)
                         unary_expression : factor  	<Line: 8-8>(,,L3)
                          factor	: variable  	<Line: 8-8>(,,L3)
                           variable : ID 	  	<Line: 8-8>(,,)
                            ID : i 	<Line: 8>
                       ADDOP : - 	<Line: 8>
                       term :	unary_expression  	<Line: 8-8>(,,L3)
                        unary_expression : factor  	<Line: 8-8>(,,L3)
                         factor	: variable  	<Line: 8-8>(,,L3)
                          variable : ID 	  	<Line: 8-8>(,,)
                           ID : j 	<Line: 8>
                   RPAREN : ) 	<Line: 8>
                MULOP : * 	<Line: 8>
                unary_expression : factor  	<Line: 8-8>(,,L3)
                 factor : LPAREN expression RPAREN 	<Line: 8-8>(,,L3)
                  LPAREN : ( 	<Line: 8>
                  expression 	: logic_expression	  	<Line: 8-8>(,,L3)
                   logic_expression : rel_expression 	  	<Line: 8-8>(,,L3)
                    rel_expression	: simple_expression  	<Line: 8-8>(,,L3)
                     simple_expression : simple_expression ADDOP term   	<Line: 8-8>(,,L3)
                      simple_expression : term  	<Line: 8-8>(,,L3)
                       term :	unary_expression  	<Line: 8-8>(,,L3)
                        unary_expression : factor  	<Line: 8-8>(,,L3)
                         factor	: variable  	<Line: 8-8>(,,L3)
                          variable : ID 	  	<Line: 8-8>(,,)
                           ID : i 	<Line: 8>
                      ADDOP : + 	<Line: 8>
                      term :	unary_expression  	<Line: 8-8>(,,L3)
                       unary_expression : factor  	<Line: 8-8>(,,L3)
                        factor	: variable  	<Line: 8-8>(,,L3)
                         variable : ID 	  	<Line: 8-8>(,,)
                          ID : j 	<Line: 8>
                  RPAREN : ) 	<Line: 8>
           SEMICOLON : ; 	<Line: 8>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 9-9>(,,L2)
         PRINTLN : println 	<Line: 9>
         LPAREN : ( 	<Line: 9>
         ID : a 	<Line: 9>
         RPAREN : ) 	<Line: 9>
         SEMICOLON : ; 	<Line: 9>
       statement : expression_statement 	<Line: 10-10>(,,L1)
        expression_statement : expression SEMICOLON 	<Line: 10-10>(,,L1)
         expression : variable ASSIGNOP logic_expression 	<Line: 10-10>(,,L1)
          variable : ID 	  	<Line: 10-10>(,,)
           ID : b 	<Line: 10>
          ASSIGNOP : = 	<Line: 10>
          logic_expression : rel_expression 	  	<Line: 10-10>(,,L1)
           rel_expression	: simple_expression  	<Line: 10-10>(,,L1)
            simple_expression : term  	<Line: 10-10>(,,L1)
             term : term MULOP unary_expression 	<Line: 10-10>(,,L1)
              term :	unary_expression  	<Line: 10-10>(,,L1)
               unary_expression : factor  	<Line: 10-10>(,,L1)
                factor	: variable  	<Line: 10-10>(,,L1)
                 variable : ID 	  	<Line: 10-10>(,,)
                  ID : a 	<Line: 10>
              MULOP : % 	<Line: 10>
              unary_expression : factor  	<Line: 10-10>(,,L1)
               factor	: variable  	<Line: 10-10>(,,L1)
                variable : ID 	  	<Line: 10-10>(,,)
                 ID : c 	<Line: 10>
         SEMICOLON : ; 	<Line: 10>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 11-11>(,,L0)
       PRINTLN : println 	<Line: 11>
       LPAREN : ( 	<Line: 11>
       ID : b 	<Line: 11>
       RPAREN : ) 	<Line: 11>
       SEMICOLON : ; 	<Line: 11>
     RCURL : } 	<Line: 12>
