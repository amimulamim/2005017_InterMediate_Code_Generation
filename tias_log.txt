Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 1: Token <ID> Lexeme c found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : unit 
Line# 2: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 4: Token <ID> Lexeme i found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 4: Token <ID> Lexeme j found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID  
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration
statements : statement  
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 5: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 6: Token <ID> Lexeme j found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 6: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 7: Token <ID> Lexeme c found
Line# 7: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 7: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor 
term :	unary_expression 
Line# 7: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <ID> Lexeme i found
Line# 8: Token <ADDOP> Lexeme - found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 8: Token <ID> Lexeme j found
Line# 8: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor : LPAREN expression RPAREN
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <MULOP> Lexeme * found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <ID> Lexeme i found
Line# 8: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 8: Token <ID> Lexeme j found
Line# 8: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor : LPAREN expression RPAREN
unary_expression : factor 
term : term MULOP unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 9: Token <PRINTLN> Lexeme println found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <ID> Lexeme a found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 10: Token <ID> Lexeme b found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 10: Token <ID> Lexeme a found
Line# 10: Token <MULOP> Lexeme % found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 10: Token <ID> Lexeme c found
Line# 10: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term : term MULOP unary_expression
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement 
Line# 11: Token <PRINTLN> Lexeme println found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme b found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement 
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 2
	7--> <i,INT> 
	8--> <j,INT> 
	9--> <k,INT> 
	ScopeTable# 1
	1--> <c,INT> 
	10--> <a,INT> 
	11--> <b,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition 
program : program unit 
start : program
Total Lines: 13
Total Errors: 0
