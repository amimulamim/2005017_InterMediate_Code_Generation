start : program 	<Line: 1-52>
 program : program unit  	<Line: 1-52>
  program : program unit  	<Line: 1-51>
   program : program unit  	<Line: 1-4>
    program : unit  	<Line: 1-1>
     unit : var_declaration   	<Line: 1-1>
      var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 1-1>
       type_specifier	: INT  	<Line: 1-1>
        INT : int 	<Line: 1>
       declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>
        declaration_list : ID  	<Line: 1-1>
         ID : a 	<Line: 1>
        COMMA : ,  	<Line: 1>
        ID : b 	<Line: 1>
        LSQUARE : [ 	<Line: 1>
        CONST_INT : 9 	<Line: 1>
        RSQUARE : ] 	<Line: 1>
       SEMICOLON : ; 	<Line: 1>
    unit : func_definition  	<Line: 2-4>
     func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 2-4>
      type_specifier	: VOID 	<Line: 2-2>
       VOID : void 	<Line: 2>
      ID : f 	<Line: 2>
      LPAREN : ( 	<Line: 2>
      parameter_list  : type_specifier ID 	<Line: 2-2>
       type_specifier	: INT  	<Line: 2-2>
        INT : int 	<Line: 2>
       ID : x 	<Line: 2>
      RPAREN : ) 	<Line: 2>
      compound_statement : LCURL RCURL  	<Line: 2-4>
       LCURL : { 	<Line: 2>
       RCURL : } 	<Line: 4>
   unit : func_definition  	<Line: 6-51>
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 6-51>
     type_specifier	: VOID 	<Line: 6-6>
      VOID : void 	<Line: 6>
     ID : main 	<Line: 6>
     LPAREN : ( 	<Line: 6>
     RPAREN : ) 	<Line: 6>
     compound_statement : LCURL statements RCURL   	<Line: 6-51>
      LCURL : { 	<Line: 6>
      statements : statements statement  	<Line: 7-47>
       statements : statements statement  	<Line: 7-34>
        statements : statements statement  	<Line: 7-33>
         statements : statements statement  	<Line: 7-32>
          statements : statements statement  	<Line: 7-31>
           statements : statements statement  	<Line: 7-30>
            statements : statements statement  	<Line: 7-29>
             statements : statements statement  	<Line: 7-28>
              statements : statements statement  	<Line: 7-26>
               statements : statements statement  	<Line: 7-25>
                statements : statements statement  	<Line: 7-24>
                 statements : statements statement  	<Line: 7-23>
                  statements : statements statement  	<Line: 7-22>
                   statements : statements statement  	<Line: 7-21>
                    statements : statements statement  	<Line: 7-20>
                     statements : statements statement  	<Line: 7-19>
                      statements : statements statement  	<Line: 7-18>
                       statements : statements statement  	<Line: 7-17>
                        statements : statements statement  	<Line: 7-16>
                         statements : statements statement  	<Line: 7-15>
                          statements : statements statement  	<Line: 7-14>
                           statements : statements statement  	<Line: 7-13>
                            statements : statements statement  	<Line: 7-12>
                             statements : statements statement  	<Line: 7-11>
                              statements : statements statement  	<Line: 7-10>
                               statements : statements statement  	<Line: 7-9>
                                statements : statements statement  	<Line: 7-8>
                                 statements : statement   	<Line: 7-7>
                                  statement : var_declaration 	<Line: 7-7>
                                   var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 7-7>
                                    type_specifier	: INT  	<Line: 7-7>
                                     INT : int 	<Line: 7>
                                    declaration_list : declaration_list COMMA ID   	<Line: 7-7>
                                     declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 7-7>
                                      declaration_list : ID  	<Line: 7-7>
                                       ID : c 	<Line: 7>
                                      COMMA : ,  	<Line: 7>
                                      ID : d 	<Line: 7>
                                      LSQUARE : [ 	<Line: 7>
                                      CONST_INT : 5 	<Line: 7>
                                      RSQUARE : ] 	<Line: 7>
                                     COMMA : , 	<Line: 7>
                                     ID : t 	<Line: 7>
                                    SEMICOLON : ; 	<Line: 7>
                                 statement : expression_statement 	<Line: 8-8>
                                  expression_statement : expression SEMICOLON 	<Line: 8-8>
                                   expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
                                    variable : ID 	  	<Line: 8-8>
                                     ID : c 	<Line: 8>
                                    ASSIGNOP : = 	<Line: 8>
                                    logic_expression : rel_expression 	  	<Line: 8-8>
                                     rel_expression	: simple_expression  	<Line: 8-8>
                                      simple_expression : term  	<Line: 8-8>
                                       term : term MULOP unary_expression 	<Line: 8-8>
                                        term :	unary_expression  	<Line: 8-8>
                                         unary_expression : factor  	<Line: 8-8>
                                          factor : LPAREN expression RPAREN 	<Line: 8-8>
                                           LPAREN : ( 	<Line: 8>
                                           expression 	: logic_expression	  	<Line: 8-8>
                                            logic_expression : rel_expression 	  	<Line: 8-8>
                                             rel_expression	: simple_expression  	<Line: 8-8>
                                              simple_expression : simple_expression ADDOP term   	<Line: 8-8>
                                               simple_expression : term  	<Line: 8-8>
                                                term : term MULOP unary_expression 	<Line: 8-8>
                                                 term :	unary_expression  	<Line: 8-8>
                                                  unary_expression : factor  	<Line: 8-8>
                                                   factor : CONST_INT  	<Line: 8-8>
                                                    CONST_INT : 7 	<Line: 8>
                                                 MULOP : % 	<Line: 8>
                                                 unary_expression : factor  	<Line: 8-8>
                                                  factor : CONST_INT  	<Line: 8-8>
                                                   CONST_INT : 4 	<Line: 8>
                                               ADDOP : + 	<Line: 8>
                                               term :	unary_expression  	<Line: 8-8>
                                                unary_expression : factor  	<Line: 8-8>
                                                 factor : CONST_INT  	<Line: 8-8>
                                                  CONST_INT : 7 	<Line: 8>
                                           RPAREN : ) 	<Line: 8>
                                        MULOP : * 	<Line: 8>
                                        unary_expression : factor  	<Line: 8-8>
                                         factor : CONST_INT  	<Line: 8-8>
                                          CONST_INT : 2 	<Line: 8>
                                   SEMICOLON : ; 	<Line: 8>
                                statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 9-9>
                                 PRINTLN : println 	<Line: 9>
                                 LPAREN : ( 	<Line: 9>
                                 ID : c 	<Line: 9>
                                 RPAREN : ) 	<Line: 9>
                                 SEMICOLON : ; 	<Line: 9>
                               statement : expression_statement 	<Line: 10-10>
                                expression_statement : expression SEMICOLON 	<Line: 10-10>
                                 expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
                                  variable : ID LSQUARE expression RSQUARE 	<Line: 10-10>
                                   ID : b 	<Line: 10>
                                   LSQUARE : [ 	<Line: 10>
                                   expression 	: logic_expression	  	<Line: 10-10>
                                    logic_expression : rel_expression 	  	<Line: 10-10>
                                     rel_expression	: simple_expression  	<Line: 10-10>
                                      simple_expression : term  	<Line: 10-10>
                                       term :	unary_expression  	<Line: 10-10>
                                        unary_expression : factor  	<Line: 10-10>
                                         factor : CONST_INT  	<Line: 10-10>
                                          CONST_INT : 2 	<Line: 10>
                                   RSQUARE : ] 	<Line: 10>
                                  ASSIGNOP : = 	<Line: 10>
                                  logic_expression : rel_expression 	  	<Line: 10-10>
                                   rel_expression	: simple_expression  	<Line: 10-10>
                                    simple_expression : term  	<Line: 10-10>
                                     term : term MULOP unary_expression 	<Line: 10-10>
                                      term :	unary_expression  	<Line: 10-10>
                                       unary_expression : factor  	<Line: 10-10>
                                        factor : LPAREN expression RPAREN 	<Line: 10-10>
                                         LPAREN : ( 	<Line: 10>
                                         expression 	: logic_expression	  	<Line: 10-10>
                                          logic_expression : rel_expression 	  	<Line: 10-10>
                                           rel_expression	: simple_expression  	<Line: 10-10>
                                            simple_expression : simple_expression ADDOP term   	<Line: 10-10>
                                             simple_expression : simple_expression ADDOP term   	<Line: 10-10>
                                              simple_expression : term  	<Line: 10-10>
                                               term :	unary_expression  	<Line: 10-10>
                                                unary_expression : factor  	<Line: 10-10>
                                                 factor : CONST_INT  	<Line: 10-10>
                                                  CONST_INT : 1 	<Line: 10>
                                              ADDOP : + 	<Line: 10>
                                              term : term MULOP unary_expression 	<Line: 10-10>
                                               term :	unary_expression  	<Line: 10-10>
                                                unary_expression : factor  	<Line: 10-10>
                                                 factor : CONST_INT  	<Line: 10-10>
                                                  CONST_INT : 3 	<Line: 10>
                                               MULOP : * 	<Line: 10>
                                               unary_expression : factor  	<Line: 10-10>
                                                factor : CONST_INT  	<Line: 10-10>
                                                 CONST_INT : 5 	<Line: 10>
                                             ADDOP : + 	<Line: 10>
                                             term :	unary_expression  	<Line: 10-10>
                                              unary_expression : factor  	<Line: 10-10>
                                               factor : CONST_INT  	<Line: 10-10>
                                                CONST_INT : 8 	<Line: 10>
                                         RPAREN : ) 	<Line: 10>
                                      MULOP : % 	<Line: 10>
                                      unary_expression : factor  	<Line: 10-10>
                                       factor : CONST_INT  	<Line: 10-10>
                                        CONST_INT : 9 	<Line: 10>
                                 SEMICOLON : ; 	<Line: 10>
                              statement : expression_statement 	<Line: 11-11>
                               expression_statement : expression SEMICOLON 	<Line: 11-11>
                                expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
                                 variable : ID 	  	<Line: 11-11>
                                  ID : t 	<Line: 11>
                                 ASSIGNOP : = 	<Line: 11>
                                 logic_expression : rel_expression 	  	<Line: 11-11>
                                  rel_expression	: simple_expression  	<Line: 11-11>
                                   simple_expression : term  	<Line: 11-11>
                                    term :	unary_expression  	<Line: 11-11>
                                     unary_expression : factor  	<Line: 11-11>
                                      factor	: variable  	<Line: 11-11>
                                       variable : ID LSQUARE expression RSQUARE 	<Line: 11-11>
                                        ID : b 	<Line: 11>
                                        LSQUARE : [ 	<Line: 11>
                                        expression 	: logic_expression	  	<Line: 11-11>
                                         logic_expression : rel_expression 	  	<Line: 11-11>
                                          rel_expression	: simple_expression  	<Line: 11-11>
                                           simple_expression : term  	<Line: 11-11>
                                            term :	unary_expression  	<Line: 11-11>
                                             unary_expression : factor  	<Line: 11-11>
                                              factor : CONST_INT  	<Line: 11-11>
                                               CONST_INT : 2 	<Line: 11>
                                        RSQUARE : ] 	<Line: 11>
                                SEMICOLON : ; 	<Line: 11>
                             statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 12-12>
                              PRINTLN : println 	<Line: 12>
                              LPAREN : ( 	<Line: 12>
                              ID : t 	<Line: 12>
                              RPAREN : ) 	<Line: 12>
                              SEMICOLON : ; 	<Line: 12>
                            statement : expression_statement 	<Line: 13-13>
                             expression_statement : expression SEMICOLON 	<Line: 13-13>
                              expression : variable ASSIGNOP logic_expression 	<Line: 13-13>
                               variable : ID LSQUARE expression RSQUARE 	<Line: 13-13>
                                ID : b 	<Line: 13>
                                LSQUARE : [ 	<Line: 13>
                                expression 	: logic_expression	  	<Line: 13-13>
                                 logic_expression : rel_expression 	  	<Line: 13-13>
                                  rel_expression	: simple_expression  	<Line: 13-13>
                                   simple_expression : term  	<Line: 13-13>
                                    term :	unary_expression  	<Line: 13-13>
                                     unary_expression : factor  	<Line: 13-13>
                                      factor : CONST_INT  	<Line: 13-13>
                                       CONST_INT : 3 	<Line: 13>
                                RSQUARE : ] 	<Line: 13>
                               ASSIGNOP : = 	<Line: 13>
                               logic_expression : rel_expression 	  	<Line: 13-13>
                                rel_expression	: simple_expression  	<Line: 13-13>
                                 simple_expression : simple_expression ADDOP term   	<Line: 13-13>
                                  simple_expression : simple_expression ADDOP term   	<Line: 13-13>
                                   simple_expression : term  	<Line: 13-13>
                                    term :	unary_expression  	<Line: 13-13>
                                     unary_expression : factor  	<Line: 13-13>
                                      factor	: variable  	<Line: 13-13>
                                       variable : ID LSQUARE expression RSQUARE 	<Line: 13-13>
                                        ID : b 	<Line: 13>
                                        LSQUARE : [ 	<Line: 13>
                                        expression 	: logic_expression	  	<Line: 13-13>
                                         logic_expression : rel_expression 	  	<Line: 13-13>
                                          rel_expression	: simple_expression  	<Line: 13-13>
                                           simple_expression : term  	<Line: 13-13>
                                            term :	unary_expression  	<Line: 13-13>
                                             unary_expression : factor  	<Line: 13-13>
                                              factor : CONST_INT  	<Line: 13-13>
                                               CONST_INT : 2 	<Line: 13>
                                        RSQUARE : ] 	<Line: 13>
                                   ADDOP : + 	<Line: 13>
                                   term :	unary_expression  	<Line: 13-13>
                                    unary_expression : factor  	<Line: 13-13>
                                     factor : CONST_INT  	<Line: 13-13>
                                      CONST_INT : 5 	<Line: 13>
                                  ADDOP : + 	<Line: 13>
                                  term :	unary_expression  	<Line: 13-13>
                                   unary_expression : factor  	<Line: 13-13>
                                    factor	: variable  	<Line: 13-13>
                                     variable : ID 	  	<Line: 13-13>
                                      ID : c 	<Line: 13>
                              SEMICOLON : ; 	<Line: 13>
                           statement : expression_statement 	<Line: 14-14>
                            expression_statement : expression SEMICOLON 	<Line: 14-14>
                             expression : variable ASSIGNOP logic_expression 	<Line: 14-14>
                              variable : ID LSQUARE expression RSQUARE 	<Line: 14-14>
                               ID : d 	<Line: 14>
                               LSQUARE : [ 	<Line: 14>
                               expression 	: logic_expression	  	<Line: 14-14>
                                logic_expression : rel_expression 	  	<Line: 14-14>
                                 rel_expression	: simple_expression  	<Line: 14-14>
                                  simple_expression : term  	<Line: 14-14>
                                   term :	unary_expression  	<Line: 14-14>
                                    unary_expression : factor  	<Line: 14-14>
                                     factor : CONST_INT  	<Line: 14-14>
                                      CONST_INT : 3 	<Line: 14>
                               RSQUARE : ] 	<Line: 14>
                              ASSIGNOP : = 	<Line: 14>
                              logic_expression : rel_expression 	  	<Line: 14-14>
                               rel_expression	: simple_expression  	<Line: 14-14>
                                simple_expression : term  	<Line: 14-14>
                                 term :	unary_expression  	<Line: 14-14>
                                  unary_expression : factor  	<Line: 14-14>
                                   factor	: variable  	<Line: 14-14>
                                    variable : ID LSQUARE expression RSQUARE 	<Line: 14-14>
                                     ID : b 	<Line: 14>
                                     LSQUARE : [ 	<Line: 14>
                                     expression 	: logic_expression	  	<Line: 14-14>
                                      logic_expression : rel_expression 	  	<Line: 14-14>
                                       rel_expression	: simple_expression  	<Line: 14-14>
                                        simple_expression : term  	<Line: 14-14>
                                         term :	unary_expression  	<Line: 14-14>
                                          unary_expression : factor  	<Line: 14-14>
                                           factor : CONST_INT  	<Line: 14-14>
                                            CONST_INT : 3 	<Line: 14>
                                     RSQUARE : ] 	<Line: 14>
                             SEMICOLON : ; 	<Line: 14>
                          statement : expression_statement 	<Line: 15-15>
                           expression_statement : expression SEMICOLON 	<Line: 15-15>
                            expression : variable ASSIGNOP logic_expression 	<Line: 15-15>
                             variable : ID 	  	<Line: 15-15>
                              ID : t 	<Line: 15>
                             ASSIGNOP : = 	<Line: 15>
                             logic_expression : rel_expression 	  	<Line: 15-15>
                              rel_expression	: simple_expression  	<Line: 15-15>
                               simple_expression : term  	<Line: 15-15>
                                term :	unary_expression  	<Line: 15-15>
                                 unary_expression : factor  	<Line: 15-15>
                                  factor	: variable  	<Line: 15-15>
                                   variable : ID LSQUARE expression RSQUARE 	<Line: 15-15>
                                    ID : d 	<Line: 15>
                                    LSQUARE : [ 	<Line: 15>
                                    expression 	: logic_expression	  	<Line: 15-15>
                                     logic_expression : rel_expression 	  	<Line: 15-15>
                                      rel_expression	: simple_expression  	<Line: 15-15>
                                       simple_expression : term  	<Line: 15-15>
                                        term :	unary_expression  	<Line: 15-15>
                                         unary_expression : factor  	<Line: 15-15>
                                          factor : CONST_INT  	<Line: 15-15>
                                           CONST_INT : 3 	<Line: 15>
                                    RSQUARE : ] 	<Line: 15>
                            SEMICOLON : ; 	<Line: 15>
                         statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 16-16>
                          PRINTLN : println 	<Line: 16>
                          LPAREN : ( 	<Line: 16>
                          ID : t 	<Line: 16>
                          RPAREN : ) 	<Line: 16>
                          SEMICOLON : ; 	<Line: 16>
                        statement : expression_statement 	<Line: 17-17>
                         expression_statement : expression SEMICOLON 	<Line: 17-17>
                          expression 	: logic_expression	  	<Line: 17-17>
                           logic_expression : rel_expression 	  	<Line: 17-17>
                            rel_expression	: simple_expression  	<Line: 17-17>
                             simple_expression : term  	<Line: 17-17>
                              term :	unary_expression  	<Line: 17-17>
                               unary_expression : factor  	<Line: 17-17>
                                factor : variable INCOP  	<Line: 17-17>
                                 variable : ID LSQUARE expression RSQUARE 	<Line: 17-17>
                                  ID : d 	<Line: 17>
                                  LSQUARE : [ 	<Line: 17>
                                  expression 	: logic_expression	  	<Line: 17-17>
                                   logic_expression : rel_expression 	  	<Line: 17-17>
                                    rel_expression	: simple_expression  	<Line: 17-17>
                                     simple_expression : term  	<Line: 17-17>
                                      term :	unary_expression  	<Line: 17-17>
                                       unary_expression : factor  	<Line: 17-17>
                                        factor : CONST_INT  	<Line: 17-17>
                                         CONST_INT : 3 	<Line: 17>
                                  RSQUARE : ] 	<Line: 17>
                                 INCOP : ++ 	<Line: 17>
                          SEMICOLON : ; 	<Line: 17>
                       statement : expression_statement 	<Line: 18-18>
                        expression_statement : expression SEMICOLON 	<Line: 18-18>
                         expression : variable ASSIGNOP logic_expression 	<Line: 18-18>
                          variable : ID 	  	<Line: 18-18>
                           ID : t 	<Line: 18>
                          ASSIGNOP : = 	<Line: 18>
                          logic_expression : rel_expression 	  	<Line: 18-18>
                           rel_expression	: simple_expression  	<Line: 18-18>
                            simple_expression : term  	<Line: 18-18>
                             term :	unary_expression  	<Line: 18-18>
                              unary_expression : factor  	<Line: 18-18>
                               factor	: variable  	<Line: 18-18>
                                variable : ID LSQUARE expression RSQUARE 	<Line: 18-18>
                                 ID : d 	<Line: 18>
                                 LSQUARE : [ 	<Line: 18>
                                 expression 	: logic_expression	  	<Line: 18-18>
                                  logic_expression : rel_expression 	  	<Line: 18-18>
                                   rel_expression	: simple_expression  	<Line: 18-18>
                                    simple_expression : term  	<Line: 18-18>
                                     term :	unary_expression  	<Line: 18-18>
                                      unary_expression : factor  	<Line: 18-18>
                                       factor : CONST_INT  	<Line: 18-18>
                                        CONST_INT : 3 	<Line: 18>
                                 RSQUARE : ] 	<Line: 18>
                         SEMICOLON : ; 	<Line: 18>
                      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 19-19>
                       PRINTLN : println 	<Line: 19>
                       LPAREN : ( 	<Line: 19>
                       ID : t 	<Line: 19>
                       RPAREN : ) 	<Line: 19>
                       SEMICOLON : ; 	<Line: 19>
                     statement : expression_statement 	<Line: 20-20>
                      expression_statement : expression SEMICOLON 	<Line: 20-20>
                       expression 	: logic_expression	  	<Line: 20-20>
                        logic_expression : rel_expression 	  	<Line: 20-20>
                         rel_expression	: simple_expression  	<Line: 20-20>
                          simple_expression : term  	<Line: 20-20>
                           term :	unary_expression  	<Line: 20-20>
                            unary_expression : factor  	<Line: 20-20>
                             factor : variable DECOP 	<Line: 20-20>
                              variable : ID LSQUARE expression RSQUARE 	<Line: 20-20>
                               ID : d 	<Line: 20>
                               LSQUARE : [ 	<Line: 20>
                               expression 	: logic_expression	  	<Line: 20-20>
                                logic_expression : rel_expression 	  	<Line: 20-20>
                                 rel_expression	: simple_expression  	<Line: 20-20>
                                  simple_expression : term  	<Line: 20-20>
                                   term :	unary_expression  	<Line: 20-20>
                                    unary_expression : factor  	<Line: 20-20>
                                     factor : CONST_INT  	<Line: 20-20>
                                      CONST_INT : 3 	<Line: 20>
                               RSQUARE : ] 	<Line: 20>
                              DECOP : -- 	<Line: 20>
                       SEMICOLON : ; 	<Line: 20>
                    statement : expression_statement 	<Line: 21-21>
                     expression_statement : expression SEMICOLON 	<Line: 21-21>
                      expression 	: logic_expression	  	<Line: 21-21>
                       logic_expression : rel_expression 	  	<Line: 21-21>
                        rel_expression	: simple_expression  	<Line: 21-21>
                         simple_expression : term  	<Line: 21-21>
                          term :	unary_expression  	<Line: 21-21>
                           unary_expression : factor  	<Line: 21-21>
                            factor : variable DECOP 	<Line: 21-21>
                             variable : ID LSQUARE expression RSQUARE 	<Line: 21-21>
                              ID : d 	<Line: 21>
                              LSQUARE : [ 	<Line: 21>
                              expression 	: logic_expression	  	<Line: 21-21>
                               logic_expression : rel_expression 	  	<Line: 21-21>
                                rel_expression	: simple_expression  	<Line: 21-21>
                                 simple_expression : term  	<Line: 21-21>
                                  term :	unary_expression  	<Line: 21-21>
                                   unary_expression : factor  	<Line: 21-21>
                                    factor : CONST_INT  	<Line: 21-21>
                                     CONST_INT : 3 	<Line: 21>
                              RSQUARE : ] 	<Line: 21>
                             DECOP : -- 	<Line: 21>
                      SEMICOLON : ; 	<Line: 21>
                   statement : expression_statement 	<Line: 22-22>
                    expression_statement : expression SEMICOLON 	<Line: 22-22>
                     expression : variable ASSIGNOP logic_expression 	<Line: 22-22>
                      variable : ID 	  	<Line: 22-22>
                       ID : t 	<Line: 22>
                      ASSIGNOP : = 	<Line: 22>
                      logic_expression : rel_expression 	  	<Line: 22-22>
                       rel_expression	: simple_expression  	<Line: 22-22>
                        simple_expression : term  	<Line: 22-22>
                         term :	unary_expression  	<Line: 22-22>
                          unary_expression : factor  	<Line: 22-22>
                           factor	: variable  	<Line: 22-22>
                            variable : ID LSQUARE expression RSQUARE 	<Line: 22-22>
                             ID : d 	<Line: 22>
                             LSQUARE : [ 	<Line: 22>
                             expression 	: logic_expression	  	<Line: 22-22>
                              logic_expression : rel_expression 	  	<Line: 22-22>
                               rel_expression	: simple_expression  	<Line: 22-22>
                                simple_expression : term  	<Line: 22-22>
                                 term :	unary_expression  	<Line: 22-22>
                                  unary_expression : factor  	<Line: 22-22>
                                   factor : CONST_INT  	<Line: 22-22>
                                    CONST_INT : 3 	<Line: 22>
                             RSQUARE : ] 	<Line: 22>
                     SEMICOLON : ; 	<Line: 22>
                  statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 23-23>
                   PRINTLN : println 	<Line: 23>
                   LPAREN : ( 	<Line: 23>
                   ID : t 	<Line: 23>
                   RPAREN : ) 	<Line: 23>
                   SEMICOLON : ; 	<Line: 23>
                 statement : expression_statement 	<Line: 24-24>
                  expression_statement : expression SEMICOLON 	<Line: 24-24>
                   expression : variable ASSIGNOP logic_expression 	<Line: 24-24>
                    variable : ID LSQUARE expression RSQUARE 	<Line: 24-24>
                     ID : d 	<Line: 24>
                     LSQUARE : [ 	<Line: 24>
                     expression 	: logic_expression	  	<Line: 24-24>
                      logic_expression : rel_expression 	  	<Line: 24-24>
                       rel_expression	: simple_expression  	<Line: 24-24>
                        simple_expression : term  	<Line: 24-24>
                         term :	unary_expression  	<Line: 24-24>
                          unary_expression : factor  	<Line: 24-24>
                           factor : CONST_INT  	<Line: 24-24>
                            CONST_INT : 3 	<Line: 24>
                     RSQUARE : ] 	<Line: 24>
                    ASSIGNOP : = 	<Line: 24>
                    logic_expression : rel_expression 	  	<Line: 24-24>
                     rel_expression	: simple_expression  	<Line: 24-24>
                      simple_expression : term  	<Line: 24-24>
                       term :	unary_expression  	<Line: 24-24>
                        unary_expression : factor  	<Line: 24-24>
                         factor : CONST_INT  	<Line: 24-24>
                          CONST_INT : 5 	<Line: 24>
                   SEMICOLON : ; 	<Line: 24>
                statement : expression_statement 	<Line: 25-25>
                 expression_statement : expression SEMICOLON 	<Line: 25-25>
                  expression : variable ASSIGNOP logic_expression 	<Line: 25-25>
                   variable : ID 	  	<Line: 25-25>
                    ID : t 	<Line: 25>
                   ASSIGNOP : = 	<Line: 25>
                   logic_expression : rel_expression 	  	<Line: 25-25>
                    rel_expression	: simple_expression  	<Line: 25-25>
                     simple_expression : term  	<Line: 25-25>
                      term :	unary_expression  	<Line: 25-25>
                       unary_expression : factor  	<Line: 25-25>
                        factor	: variable  	<Line: 25-25>
                         variable : ID LSQUARE expression RSQUARE 	<Line: 25-25>
                          ID : d 	<Line: 25>
                          LSQUARE : [ 	<Line: 25>
                          expression 	: logic_expression	  	<Line: 25-25>
                           logic_expression : rel_expression 	  	<Line: 25-25>
                            rel_expression	: simple_expression  	<Line: 25-25>
                             simple_expression : term  	<Line: 25-25>
                              term :	unary_expression  	<Line: 25-25>
                               unary_expression : factor  	<Line: 25-25>
                                factor : CONST_INT  	<Line: 25-25>
                                 CONST_INT : 3 	<Line: 25>
                          RSQUARE : ] 	<Line: 25>
                  SEMICOLON : ; 	<Line: 25>
               statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 26-26>
                PRINTLN : println 	<Line: 26>
                LPAREN : ( 	<Line: 26>
                ID : t 	<Line: 26>
                RPAREN : ) 	<Line: 26>
                SEMICOLON : ; 	<Line: 26>
              statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 28-28>
               PRINTLN : println 	<Line: 28>
               LPAREN : ( 	<Line: 28>
               ID : c 	<Line: 28>
               RPAREN : ) 	<Line: 28>
               SEMICOLON : ; 	<Line: 28>
             statement : expression_statement 	<Line: 29-29>
              expression_statement : expression SEMICOLON 	<Line: 29-29>
               expression 	: logic_expression	  	<Line: 29-29>
                logic_expression : rel_expression 	  	<Line: 29-29>
                 rel_expression	: simple_expression  	<Line: 29-29>
                  simple_expression : term  	<Line: 29-29>
                   term :	unary_expression  	<Line: 29-29>
                    unary_expression : factor  	<Line: 29-29>
                     factor : variable INCOP  	<Line: 29-29>
                      variable : ID 	  	<Line: 29-29>
                       ID : c 	<Line: 29>
                      INCOP : ++ 	<Line: 29>
               SEMICOLON : ; 	<Line: 29>
            statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 30-30>
             PRINTLN : println 	<Line: 30>
             LPAREN : ( 	<Line: 30>
             ID : c 	<Line: 30>
             RPAREN : ) 	<Line: 30>
             SEMICOLON : ; 	<Line: 30>
           statement : expression_statement 	<Line: 31-31>
            expression_statement : expression SEMICOLON 	<Line: 31-31>
             expression 	: logic_expression	  	<Line: 31-31>
              logic_expression : rel_expression 	  	<Line: 31-31>
               rel_expression	: simple_expression  	<Line: 31-31>
                simple_expression : term  	<Line: 31-31>
                 term :	unary_expression  	<Line: 31-31>
                  unary_expression : factor  	<Line: 31-31>
                   factor : variable DECOP 	<Line: 31-31>
                    variable : ID 	  	<Line: 31-31>
                     ID : c 	<Line: 31>
                    DECOP : -- 	<Line: 31>
             SEMICOLON : ; 	<Line: 31>
          statement : expression_statement 	<Line: 32-32>
           expression_statement : expression SEMICOLON 	<Line: 32-32>
            expression 	: logic_expression	  	<Line: 32-32>
             logic_expression : rel_expression 	  	<Line: 32-32>
              rel_expression	: simple_expression  	<Line: 32-32>
               simple_expression : term  	<Line: 32-32>
                term :	unary_expression  	<Line: 32-32>
                 unary_expression : factor  	<Line: 32-32>
                  factor : variable DECOP 	<Line: 32-32>
                   variable : ID 	  	<Line: 32-32>
                    ID : c 	<Line: 32>
                   DECOP : -- 	<Line: 32>
            SEMICOLON : ; 	<Line: 32>
         statement : expression_statement 	<Line: 33-33>
          expression_statement : expression SEMICOLON 	<Line: 33-33>
           expression 	: logic_expression	  	<Line: 33-33>
            logic_expression : rel_expression 	  	<Line: 33-33>
             rel_expression	: simple_expression  	<Line: 33-33>
              simple_expression : term  	<Line: 33-33>
               term :	unary_expression  	<Line: 33-33>
                unary_expression : factor  	<Line: 33-33>
                 factor : variable DECOP 	<Line: 33-33>
                  variable : ID 	  	<Line: 33-33>
                   ID : c 	<Line: 33>
                  DECOP : -- 	<Line: 33>
           SEMICOLON : ; 	<Line: 33>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 34-34>
         PRINTLN : println 	<Line: 34>
         LPAREN : ( 	<Line: 34>
         ID : c 	<Line: 34>
         RPAREN : ) 	<Line: 34>
         SEMICOLON : ; 	<Line: 34>
       statement : expression_statement 	<Line: 47-47>
        expression_statement : expression SEMICOLON 	<Line: 47-47>
         expression 	: logic_expression	  	<Line: 47-47>
          logic_expression : rel_expression 	  	<Line: 47-47>
           rel_expression	: simple_expression  	<Line: 47-47>
            simple_expression : term  	<Line: 47-47>
             term :	unary_expression  	<Line: 47-47>
              unary_expression : factor  	<Line: 47-47>
               factor : ID LPAREN argument_list RPAREN 	<Line: 47-47>
                ID : f 	<Line: 47>
                LPAREN : ( 	<Line: 47>
                argument_list : arguments 	<Line: 47-47>
                 arguments : logic_expression 	<Line: 47-47>
                  logic_expression : rel_expression 	  	<Line: 47-47>
                   rel_expression	: simple_expression  	<Line: 47-47>
                    simple_expression : simple_expression ADDOP term   	<Line: 47-47>
                     simple_expression : term  	<Line: 47-47>
                      term :	unary_expression  	<Line: 47-47>
                       unary_expression : factor  	<Line: 47-47>
                        factor : CONST_INT  	<Line: 47-47>
                         CONST_INT : 5 	<Line: 47>
                     ADDOP : + 	<Line: 47>
                     term :	unary_expression  	<Line: 47-47>
                      unary_expression : factor  	<Line: 47-47>
                       factor : CONST_INT  	<Line: 47-47>
                        CONST_INT : 3 	<Line: 47>
                RPAREN : ) 	<Line: 47>
         SEMICOLON : ; 	<Line: 47>
      RCURL : } 	<Line: 51>
  unit : var_declaration   	<Line: 52-52>
   var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 52-52>
    type_specifier	: INT  	<Line: 52-52>
     INT : int 	<Line: 52>
    declaration_list : declaration_list COMMA ID   	<Line: 52-52>
     declaration_list : ID  	<Line: 52-52>
      ID : g1 	<Line: 52>
     COMMA : , 	<Line: 52>
     ID : g2 	<Line: 52>
    SEMICOLON : ; 	<Line: 52>
