start : program 	<Line: 1-21>
 program : program unit  	<Line: 1-21>
  program : program unit  	<Line: 1-20>
   program : program unit  	<Line: 1-4>
    program : unit  	<Line: 1-1>
     unit : var_declaration   	<Line: 1-1>
      var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 1-1>
       type_specifier	: INT  	<Line: 1-1>
        INT : int 	<Line: 1>
       declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>
        declaration_list : ID  	<Line: 1-1>
         ID : a 	<Line: 1>
        COMMA : ,  	<Line: 1>
        ID : b 	<Line: 1>
        LSQUARE : [ 	<Line: 1>
        CONST_INT : 9 	<Line: 1>
        RSQUARE : ] 	<Line: 1>
       SEMICOLON : ; 	<Line: 1>
    unit : func_definition  	<Line: 2-4>
     func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-4>
      type_specifier	: VOID 	<Line: 2-2>
       VOID : void 	<Line: 2>
      ID : f 	<Line: 2>
      LPAREN : ( 	<Line: 2>
      RPAREN : ) 	<Line: 2>
      compound_statement : LCURL RCURL  	<Line: 2-4>
       LCURL : { 	<Line: 2>
       RCURL : } 	<Line: 4>
   unit : func_definition  	<Line: 6-20>
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 6-20>
     type_specifier	: VOID 	<Line: 6-6>
      VOID : void 	<Line: 6>
     ID : main 	<Line: 6>
     LPAREN : ( 	<Line: 6>
     RPAREN : ) 	<Line: 6>
     compound_statement : LCURL statements RCURL   	<Line: 6-20>
      LCURL : { 	<Line: 6>
      statements : statements statement  	<Line: 7-16>
       statements : statements statement  	<Line: 7-15>
        statements : statements statement  	<Line: 7-14>
         statements : statements statement  	<Line: 7-13>
          statements : statements statement  	<Line: 7-12>
           statements : statements statement  	<Line: 7-11>
            statements : statements statement  	<Line: 7-10>
             statements : statements statement  	<Line: 7-9>
              statements : statements statement  	<Line: 7-8>
               statements : statement   	<Line: 7-7>
                statement : var_declaration 	<Line: 7-7>
                 var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 7-7>
                  type_specifier	: INT  	<Line: 7-7>
                   INT : int 	<Line: 7>
                  declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 7-7>
                   declaration_list : ID  	<Line: 7-7>
                    ID : c 	<Line: 7>
                   COMMA : ,  	<Line: 7>
                   ID : d 	<Line: 7>
                   LSQUARE : [ 	<Line: 7>
                   CONST_INT : 5 	<Line: 7>
                   RSQUARE : ] 	<Line: 7>
                  SEMICOLON : ; 	<Line: 7>
               statement : expression_statement 	<Line: 8-8>
                expression_statement : expression SEMICOLON 	<Line: 8-8>
                 expression 	: logic_expression	  	<Line: 8-8>
                  logic_expression : rel_expression 	  	<Line: 8-8>
                   rel_expression	: simple_expression  	<Line: 8-8>
                    simple_expression : term  	<Line: 8-8>
                     term :	unary_expression  	<Line: 8-8>
                      unary_expression : NOT unary_expression 	<Line: 8-8>
                       NOT : ! 	<Line: 8>
                       unary_expression : factor  	<Line: 8-8>
                        factor : CONST_INT  	<Line: 8-8>
                         CONST_INT : 1 	<Line: 8>
                 SEMICOLON : ; 	<Line: 8>
              statement : expression_statement 	<Line: 9-9>
               expression_statement : expression SEMICOLON 	<Line: 9-9>
                expression 	: logic_expression	  	<Line: 9-9>
                 logic_expression : rel_expression 	  	<Line: 9-9>
                  rel_expression	: simple_expression  	<Line: 9-9>
                   simple_expression : term  	<Line: 9-9>
                    term :	unary_expression  	<Line: 9-9>
                     unary_expression : ADDOP unary_expression 	<Line: 9-9>
                      ADDOP :  	<Line: 9>
                      unary_expression : factor  	<Line: 9-9>
                       factor : CONST_INT  	<Line: 9-9>
                        CONST_INT : 2 	<Line: 9>
                SEMICOLON : ; 	<Line: 9>
             statement : expression_statement 	<Line: 10-10>
              expression_statement : expression SEMICOLON 	<Line: 10-10>
               expression 	: logic_expression	  	<Line: 10-10>
                logic_expression : rel_expression 	  	<Line: 10-10>
                 rel_expression	: simple_expression  	<Line: 10-10>
                  simple_expression : term  	<Line: 10-10>
                   term : term MULOP unary_expression 	<Line: 10-10>
                    term :	unary_expression  	<Line: 10-10>
                     unary_expression : factor  	<Line: 10-10>
                      factor : CONST_INT  	<Line: 10-10>
                       CONST_INT : 7 	<Line: 10>
                    MULOP : % 	<Line: 10>
                    unary_expression : factor  	<Line: 10-10>
                     factor : CONST_INT  	<Line: 10-10>
                      CONST_INT : 3 	<Line: 10>
               SEMICOLON : ; 	<Line: 10>
            statement : expression_statement 	<Line: 11-11>
             expression_statement : expression SEMICOLON 	<Line: 11-11>
              expression 	: logic_expression	  	<Line: 11-11>
               logic_expression : rel_expression 	  	<Line: 11-11>
                rel_expression	: simple_expression  	<Line: 11-11>
                 simple_expression : term  	<Line: 11-11>
                  term :	unary_expression  	<Line: 11-11>
                   unary_expression : factor  	<Line: 11-11>
                    factor : variable INCOP  	<Line: 11-11>
                     variable : ID 	  	<Line: 11-11>
                      ID : c 	<Line: 11>
                     INCOP : ++ 	<Line: 11>
              SEMICOLON : ; 	<Line: 11>
           statement : expression_statement 	<Line: 12-12>
            expression_statement : expression SEMICOLON 	<Line: 12-12>
             expression 	: logic_expression	  	<Line: 12-12>
              logic_expression : rel_expression 	  	<Line: 12-12>
               rel_expression	: simple_expression  	<Line: 12-12>
                simple_expression : term  	<Line: 12-12>
                 term :	unary_expression  	<Line: 12-12>
                  unary_expression : factor  	<Line: 12-12>
                   factor	: variable  	<Line: 12-12>
                    variable : ID 	  	<Line: 12-12>
                     ID : g1 	<Line: 12>
             SEMICOLON : ; 	<Line: 12>
          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>
           PRINTLN : println 	<Line: 13>
           LPAREN : ( 	<Line: 13>
           ID : c 	<Line: 13>
           RPAREN : ) 	<Line: 13>
           SEMICOLON : ; 	<Line: 13>
         statement : expression_statement 	<Line: 14-14>
          expression_statement : expression SEMICOLON 	<Line: 14-14>
           expression 	: logic_expression	  	<Line: 14-14>
            logic_expression : rel_expression 	  	<Line: 14-14>
             rel_expression	: simple_expression  	<Line: 14-14>
              simple_expression : term  	<Line: 14-14>
               term :	unary_expression  	<Line: 14-14>
                unary_expression : factor  	<Line: 14-14>
                 factor	: variable  	<Line: 14-14>
                  variable : ID LSQUARE expression RSQUARE 	<Line: 14-14>
                   ID : d 	<Line: 14>
                   LSQUARE : [ 	<Line: 14>
                   expression 	: logic_expression	  	<Line: 14-14>
                    logic_expression : rel_expression 	  	<Line: 14-14>
                     rel_expression	: simple_expression  	<Line: 14-14>
                      simple_expression : term  	<Line: 14-14>
                       term :	unary_expression  	<Line: 14-14>
                        unary_expression : factor  	<Line: 14-14>
                         factor : CONST_INT  	<Line: 14-14>
                          CONST_INT : 2 	<Line: 14>
                   RSQUARE : ] 	<Line: 14>
           SEMICOLON : ; 	<Line: 14>
        statement : expression_statement 	<Line: 15-15>
         expression_statement : expression SEMICOLON 	<Line: 15-15>
          expression 	: logic_expression	  	<Line: 15-15>
           logic_expression : rel_expression 	  	<Line: 15-15>
            rel_expression	: simple_expression  	<Line: 15-15>
             simple_expression : term  	<Line: 15-15>
              term :	unary_expression  	<Line: 15-15>
               unary_expression : factor  	<Line: 15-15>
                factor : CONST_INT  	<Line: 15-15>
                 CONST_INT : 10 	<Line: 15>
          SEMICOLON : ; 	<Line: 15>
       statement : expression_statement 	<Line: 16-16>
        expression_statement : expression SEMICOLON 	<Line: 16-16>
         expression 	: logic_expression	  	<Line: 16-16>
          logic_expression : rel_expression 	  	<Line: 16-16>
           rel_expression	: simple_expression  	<Line: 16-16>
            simple_expression : term  	<Line: 16-16>
             term :	unary_expression  	<Line: 16-16>
              unary_expression : factor  	<Line: 16-16>
               factor : ID LPAREN argument_list RPAREN 	<Line: 16-16>
                ID : f 	<Line: 16>
                LPAREN : ( 	<Line: 16>
                argument_list :  	<Line: 16>
                RPAREN : ) 	<Line: 16>
         SEMICOLON : ; 	<Line: 16>
      RCURL : } 	<Line: 20>
  unit : var_declaration   	<Line: 21-21>
   var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 21-21>
    type_specifier	: INT  	<Line: 21-21>
     INT : int 	<Line: 21>
    declaration_list : declaration_list COMMA ID   	<Line: 21-21>
     declaration_list : ID  	<Line: 21-21>
      ID : g1 	<Line: 21>
     COMMA : , 	<Line: 21>
     ID : g2 	<Line: 21>
    SEMICOLON : ; 	<Line: 21>
