start : program 	<Line: 1-17>
 program : program unit  	<Line: 1-17>
  program : program unit  	<Line: 1-16>
   program : program unit  	<Line: 1-4>
    program : unit  	<Line: 1-1>
     unit : var_declaration   	<Line: 1-1>
      var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 1-1>
       type_specifier	: INT  	<Line: 1-1>
        INT : int 	<Line: 1>
       declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>
        declaration_list : ID  	<Line: 1-1>
         ID : a 	<Line: 1>
        COMMA : ,  	<Line: 1>
        ID : b 	<Line: 1>
        LSQUARE : [ 	<Line: 1>
        CONST_INT : 9 	<Line: 1>
        RSQUARE : ] 	<Line: 1>
       SEMICOLON : ; 	<Line: 1>
    unit : func_definition  	<Line: 2-4>
     func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 2-4>
      type_specifier	: VOID 	<Line: 2-2>
       VOID : void 	<Line: 2>
      ID : f 	<Line: 2>
      LPAREN : ( 	<Line: 2>
      parameter_list  : type_specifier ID 	<Line: 2-2>
       type_specifier	: INT  	<Line: 2-2>
        INT : int 	<Line: 2>
       ID : x 	<Line: 2>
      RPAREN : ) 	<Line: 2>
      compound_statement : LCURL RCURL  	<Line: 2-4>
       LCURL : { 	<Line: 2>
       RCURL : } 	<Line: 4>
   unit : func_definition  	<Line: 6-16>
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 6-16>
     type_specifier	: VOID 	<Line: 6-6>
      VOID : void 	<Line: 6>
     ID : main 	<Line: 6>
     LPAREN : ( 	<Line: 6>
     RPAREN : ) 	<Line: 6>
     compound_statement : LCURL statements RCURL   	<Line: 6-16>
      LCURL : { 	<Line: 6>
      statements : statements statement  	<Line: 7-12>
       statements : statements statement  	<Line: 7-10>
        statements : statements statement  	<Line: 7-8>
         statements : statement   	<Line: 7-7>
          statement : var_declaration 	<Line: 7-7>
           var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 7-7>
            type_specifier	: INT  	<Line: 7-7>
             INT : int 	<Line: 7>
            declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 7-7>
             declaration_list : ID  	<Line: 7-7>
              ID : c 	<Line: 7>
             COMMA : ,  	<Line: 7>
             ID : d 	<Line: 7>
             LSQUARE : [ 	<Line: 7>
             CONST_INT : 5 	<Line: 7>
             RSQUARE : ] 	<Line: 7>
            SEMICOLON : ; 	<Line: 7>
         statement : expression_statement 	<Line: 8-8>
          expression_statement : expression SEMICOLON 	<Line: 8-8>
           expression 	: logic_expression	  	<Line: 8-8>
            logic_expression : rel_expression 	  	<Line: 8-8>
             rel_expression	: simple_expression  	<Line: 8-8>
              simple_expression : simple_expression ADDOP term   	<Line: 8-8>
               simple_expression : simple_expression ADDOP term   	<Line: 8-8>
                simple_expression : term  	<Line: 8-8>
                 term : term MULOP unary_expression 	<Line: 8-8>
                  term :	unary_expression  	<Line: 8-8>
                   unary_expression : factor  	<Line: 8-8>
                    factor : CONST_INT  	<Line: 8-8>
                     CONST_INT : 7 	<Line: 8>
                  MULOP : % 	<Line: 8>
                  unary_expression : factor  	<Line: 8-8>
                   factor : CONST_INT  	<Line: 8-8>
                    CONST_INT : 3 	<Line: 8>
                ADDOP : + 	<Line: 8>
                term :	unary_expression  	<Line: 8-8>
                 unary_expression : factor  	<Line: 8-8>
                  factor : CONST_INT  	<Line: 8-8>
                   CONST_INT : 5 	<Line: 8>
               ADDOP : - 	<Line: 8>
               term :	unary_expression  	<Line: 8-8>
                unary_expression : factor  	<Line: 8-8>
                 factor : CONST_INT  	<Line: 8-8>
                  CONST_INT : 2 	<Line: 8>
           SEMICOLON : ; 	<Line: 8>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 10-10>
         PRINTLN : println 	<Line: 10>
         LPAREN : ( 	<Line: 10>
         ID : c 	<Line: 10>
         RPAREN : ) 	<Line: 10>
         SEMICOLON : ; 	<Line: 10>
       statement : expression_statement 	<Line: 12-12>
        expression_statement : expression SEMICOLON 	<Line: 12-12>
         expression 	: logic_expression	  	<Line: 12-12>
          logic_expression : rel_expression 	  	<Line: 12-12>
           rel_expression	: simple_expression  	<Line: 12-12>
            simple_expression : term  	<Line: 12-12>
             term :	unary_expression  	<Line: 12-12>
              unary_expression : factor  	<Line: 12-12>
               factor : ID LPAREN argument_list RPAREN 	<Line: 12-12>
                ID : f 	<Line: 12>
                LPAREN : ( 	<Line: 12>
                argument_list : arguments 	<Line: 12-12>
                 arguments : logic_expression 	<Line: 12-12>
                  logic_expression : rel_expression 	  	<Line: 12-12>
                   rel_expression	: simple_expression  	<Line: 12-12>
                    simple_expression : simple_expression ADDOP term   	<Line: 12-12>
                     simple_expression : term  	<Line: 12-12>
                      term :	unary_expression  	<Line: 12-12>
                       unary_expression : factor  	<Line: 12-12>
                        factor : CONST_INT  	<Line: 12-12>
                         CONST_INT : 5 	<Line: 12>
                     ADDOP : + 	<Line: 12>
                     term :	unary_expression  	<Line: 12-12>
                      unary_expression : factor  	<Line: 12-12>
                       factor : CONST_INT  	<Line: 12-12>
                        CONST_INT : 3 	<Line: 12>
                RPAREN : ) 	<Line: 12>
         SEMICOLON : ; 	<Line: 12>
      RCURL : } 	<Line: 16>
  unit : var_declaration   	<Line: 17-17>
   var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 17-17>
    type_specifier	: INT  	<Line: 17-17>
     INT : int 	<Line: 17>
    declaration_list : declaration_list COMMA ID   	<Line: 17-17>
     declaration_list : ID  	<Line: 17-17>
      ID : g1 	<Line: 17>
     COMMA : , 	<Line: 17>
     ID : g2 	<Line: 17>
    SEMICOLON : ; 	<Line: 17>
