start : program 	<Line: 1-52>(,,)
 program : program unit  	<Line: 1-52>(,,)
  program : program unit  	<Line: 1-51>(,,)
   program : program unit  	<Line: 1-12>(,,)
    program : program unit  	<Line: 1-6>(,,)
     program : unit  	<Line: 1-1>(,,)
      unit : var_declaration   	<Line: 1-1>(,,)
       var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 1-1>(,,)
        type_specifier	: INT  	<Line: 1-1>(,,)
         INT : int 	<Line: 1>
        declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 1-1>(,,)
         declaration_list : ID  	<Line: 1-1>(,,)
          ID : a 	<Line: 1>
         COMMA : ,  	<Line: 1>
         ID : b 	<Line: 1>
         LSQUARE : [ 	<Line: 1>
         CONST_INT : 9 	<Line: 1>
         RSQUARE : ] 	<Line: 1>
        SEMICOLON : ; 	<Line: 1>
     unit : func_definition  	<Line: 2-6>(,,)
      func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 2-6>(,,)
       type_specifier	: VOID 	<Line: 2-2>(,,)
        VOID : void 	<Line: 2>
       ID : f 	<Line: 2>
       LPAREN : ( 	<Line: 2>
       parameter_list  : parameter_list COMMA type_specifier ID 	<Line: 2-2>(,,)
        parameter_list  : type_specifier ID 	<Line: 2-2>(,,)
         type_specifier	: INT  	<Line: 2-2>(,,)
          INT : int 	<Line: 2>
         ID : x 	<Line: 2>
        COMMA : ,  	<Line: 2>
        type_specifier	: INT  	<Line: 2-2>(,,)
         INT : int 	<Line: 2>
        ID : y 	<Line: 2>
       RPAREN : ) 	<Line: 2>
       compound_statement : LCURL statements RCURL   	<Line: 2-6>(,,L0)
        LCURL : { 	<Line: 2>
        statements : statement   	<Line: 4-4>(,,L0)
         statement : var_declaration 	<Line: 4-4>(,,L0)
          var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 4-4>(,,L0)
           type_specifier	: INT  	<Line: 4-4>(,,)
            INT : int 	<Line: 4>
           declaration_list : declaration_list COMMA ID   	<Line: 4-4>(,,)
            declaration_list : ID  	<Line: 4-4>(,,)
             ID : h 	<Line: 4>
            COMMA : , 	<Line: 4>
            ID : k 	<Line: 4>
           SEMICOLON : ; 	<Line: 4>
        RCURL : } 	<Line: 6>
    unit : func_definition  	<Line: 8-12>(,,)
     func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 8-12>(,,)
      type_specifier	: VOID 	<Line: 8-8>(,,)
       VOID : void 	<Line: 8>
      ID : g 	<Line: 8>
      LPAREN : ( 	<Line: 8>
      parameter_list  : type_specifier ID 	<Line: 8-8>(,,)
       type_specifier	: INT  	<Line: 8-8>(,,)
        INT : int 	<Line: 8>
       ID : p 	<Line: 8>
      RPAREN : ) 	<Line: 8>
      compound_statement : LCURL statements RCURL   	<Line: 8-12>(,,L2)
       LCURL : { 	<Line: 8>
       statements : statements statement  	<Line: 10-11>(,,L2)
        statements : statement   	<Line: 10-10>(,,L3)
         statement : expression_statement 	<Line: 10-10>(,,L3)
          expression_statement : expression SEMICOLON 	<Line: 10-10>(,,L3)
           expression : variable ASSIGNOP logic_expression 	<Line: 10-10>(,,L3)
            variable : ID 	  	<Line: 10-10>(,,)
             ID : g1 	<Line: 10>
            ASSIGNOP : = 	<Line: 10>
            logic_expression : rel_expression 	  	<Line: 10-10>(,,L3)
             rel_expression	: simple_expression  	<Line: 10-10>(,,L3)
              simple_expression : simple_expression ADDOP term   	<Line: 10-10>(,,L3)
               simple_expression : term  	<Line: 10-10>(,,L3)
                term :	unary_expression  	<Line: 10-10>(,,L3)
                 unary_expression : factor  	<Line: 10-10>(,,L3)
                  factor	: variable  	<Line: 10-10>(,,L3)
                   variable : ID 	  	<Line: 10-10>(,,)
                    ID : p 	<Line: 10>
               ADDOP : + 	<Line: 10>
               term :	unary_expression  	<Line: 10-10>(,,L3)
                unary_expression : factor  	<Line: 10-10>(,,L3)
                 factor : CONST_INT  	<Line: 10-10>(,,L3)
                  CONST_INT : 229 	<Line: 10>
           SEMICOLON : ; 	<Line: 10>
        statement : expression_statement 	<Line: 11-11>(,,L2)
         expression_statement : expression SEMICOLON 	<Line: 11-11>(,,L2)
          expression : variable ASSIGNOP logic_expression 	<Line: 11-11>(,,L2)
           variable : ID 	  	<Line: 11-11>(,,)
            ID : g2 	<Line: 11>
           ASSIGNOP : = 	<Line: 11>
           logic_expression : rel_expression 	  	<Line: 11-11>(,,L2)
            rel_expression	: simple_expression  	<Line: 11-11>(,,L2)
             simple_expression : term  	<Line: 11-11>(,,L2)
              term :	unary_expression  	<Line: 11-11>(,,L2)
               unary_expression : ADDOP unary_expression 	<Line: 11-11>(,,L2)
                ADDOP :  	<Line: 11>
                unary_expression : factor  	<Line: 11-11>(,,L2)
                 factor	: variable  	<Line: 11-11>(,,L2)
                  variable : ID 	  	<Line: 11-11>(,,)
                   ID : g1 	<Line: 11>
          SEMICOLON : ; 	<Line: 11>
       RCURL : } 	<Line: 12>
   unit : func_definition  	<Line: 14-51>(,,)
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 14-51>(,,)
     type_specifier	: VOID 	<Line: 14-14>(,,)
      VOID : void 	<Line: 14>
     ID : main 	<Line: 14>
     LPAREN : ( 	<Line: 14>
     RPAREN : ) 	<Line: 14>
     compound_statement : LCURL statements RCURL   	<Line: 14-51>(,,L5)
      LCURL : { 	<Line: 14>
      statements : statements statement  	<Line: 15-46>(,,L5)
       statements : statements statement  	<Line: 15-45>(,,L6)
        statements : statements statement  	<Line: 15-44>(,,L7)
         statements : statements statement  	<Line: 15-42>(,,L8)
          statements : statements statement  	<Line: 15-41>(,,L9)
           statements : statements statement  	<Line: 15-40>(,,L10)
            statements : statements statement  	<Line: 15-39>(,,L11)
             statements : statements statement  	<Line: 15-38>(,,L12)
              statements : statements statement  	<Line: 15-37>(,,L13)
               statements : statements statement  	<Line: 15-36>(,,L14)
                statements : statements statement  	<Line: 15-34>(,,L15)
                 statements : statements statement  	<Line: 15-33>(,,L16)
                  statements : statements statement  	<Line: 15-32>(,,L17)
                   statements : statements statement  	<Line: 15-31>(,,L18)
                    statements : statements statement  	<Line: 15-30>(,,L19)
                     statements : statements statement  	<Line: 15-29>(,,L20)
                      statements : statements statement  	<Line: 15-28>(,,L21)
                       statements : statements statement  	<Line: 15-27>(,,L22)
                        statements : statements statement  	<Line: 15-26>(,,L23)
                         statements : statements statement  	<Line: 15-25>(,,L24)
                          statements : statements statement  	<Line: 15-24>(,,L25)
                           statements : statements statement  	<Line: 15-23>(,,L26)
                            statements : statements statement  	<Line: 15-22>(,,L27)
                             statements : statements statement  	<Line: 15-21>(,,L28)
                              statements : statements statement  	<Line: 15-20>(,,L29)
                               statements : statements statement  	<Line: 15-19>(,,L30)
                                statements : statements statement  	<Line: 15-18>(,,L31)
                                 statements : statements statement  	<Line: 15-17>(,,L32)
                                  statements : statements statement  	<Line: 15-16>(,,L33)
                                   statements : statement   	<Line: 15-15>(,,L34)
                                    statement : var_declaration 	<Line: 15-15>(,,L34)
                                     var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 15-15>(,,L34)
                                      type_specifier	: INT  	<Line: 15-15>(,,)
                                       INT : int 	<Line: 15>
                                      declaration_list : declaration_list COMMA ID   	<Line: 15-15>(,,)
                                       declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 15-15>(,,)
                                        declaration_list : ID  	<Line: 15-15>(,,)
                                         ID : c 	<Line: 15>
                                        COMMA : ,  	<Line: 15>
                                        ID : d 	<Line: 15>
                                        LSQUARE : [ 	<Line: 15>
                                        CONST_INT : 5 	<Line: 15>
                                        RSQUARE : ] 	<Line: 15>
                                       COMMA : , 	<Line: 15>
                                       ID : t 	<Line: 15>
                                      SEMICOLON : ; 	<Line: 15>
                                   statement : expression_statement 	<Line: 16-16>(,,L33)
                                    expression_statement : expression SEMICOLON 	<Line: 16-16>(,,L33)
                                     expression : variable ASSIGNOP logic_expression 	<Line: 16-16>(,,L33)
                                      variable : ID 	  	<Line: 16-16>(,,)
                                       ID : c 	<Line: 16>
                                      ASSIGNOP : = 	<Line: 16>
                                      logic_expression : rel_expression 	  	<Line: 16-16>(,,L33)
                                       rel_expression	: simple_expression  	<Line: 16-16>(,,L33)
                                        simple_expression : term  	<Line: 16-16>(,,L33)
                                         term : term MULOP unary_expression 	<Line: 16-16>(,,L33)
                                          term :	unary_expression  	<Line: 16-16>(,,L33)
                                           unary_expression : factor  	<Line: 16-16>(,,L33)
                                            factor : LPAREN expression RPAREN 	<Line: 16-16>(,,L33)
                                             LPAREN : ( 	<Line: 16>
                                             expression 	: logic_expression	  	<Line: 16-16>(,,L33)
                                              logic_expression : rel_expression 	  	<Line: 16-16>(,,L33)
                                               rel_expression	: simple_expression  	<Line: 16-16>(,,L33)
                                                simple_expression : simple_expression ADDOP term   	<Line: 16-16>(,,L33)
                                                 simple_expression : term  	<Line: 16-16>(,,L33)
                                                  term : term MULOP unary_expression 	<Line: 16-16>(,,L33)
                                                   term :	unary_expression  	<Line: 16-16>(,,L33)
                                                    unary_expression : factor  	<Line: 16-16>(,,L33)
                                                     factor : CONST_INT  	<Line: 16-16>(,,L33)
                                                      CONST_INT : 7 	<Line: 16>
                                                   MULOP : % 	<Line: 16>
                                                   unary_expression : factor  	<Line: 16-16>(,,L33)
                                                    factor : CONST_INT  	<Line: 16-16>(,,L33)
                                                     CONST_INT : 4 	<Line: 16>
                                                 ADDOP : + 	<Line: 16>
                                                 term :	unary_expression  	<Line: 16-16>(,,L33)
                                                  unary_expression : factor  	<Line: 16-16>(,,L33)
                                                   factor : CONST_INT  	<Line: 16-16>(,,L33)
                                                    CONST_INT : 7 	<Line: 16>
                                             RPAREN : ) 	<Line: 16>
                                          MULOP : * 	<Line: 16>
                                          unary_expression : factor  	<Line: 16-16>(,,L33)
                                           factor : CONST_INT  	<Line: 16-16>(,,L33)
                                            CONST_INT : 2 	<Line: 16>
                                     SEMICOLON : ; 	<Line: 16>
                                  statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 17-17>(,,L32)
                                   PRINTLN : println 	<Line: 17>
                                   LPAREN : ( 	<Line: 17>
                                   ID : c 	<Line: 17>
                                   RPAREN : ) 	<Line: 17>
                                   SEMICOLON : ; 	<Line: 17>
                                 statement : expression_statement 	<Line: 18-18>(,,L31)
                                  expression_statement : expression SEMICOLON 	<Line: 18-18>(,,L31)
                                   expression : variable ASSIGNOP logic_expression 	<Line: 18-18>(,,L31)
                                    variable : ID LSQUARE expression RSQUARE 	<Line: 18-18>(,,)
                                     ID : b 	<Line: 18>
                                     LSQUARE : [ 	<Line: 18>
                                     expression 	: logic_expression	  	<Line: 18-18>(,,)
                                      logic_expression : rel_expression 	  	<Line: 18-18>(,,)
                                       rel_expression	: simple_expression  	<Line: 18-18>(,,)
                                        simple_expression : term  	<Line: 18-18>(,,)
                                         term :	unary_expression  	<Line: 18-18>(,,)
                                          unary_expression : factor  	<Line: 18-18>(,,)
                                           factor : CONST_INT  	<Line: 18-18>(,,)
                                            CONST_INT : 2 	<Line: 18>
                                     RSQUARE : ] 	<Line: 18>
                                    ASSIGNOP : = 	<Line: 18>
                                    logic_expression : rel_expression 	  	<Line: 18-18>(,,L31)
                                     rel_expression	: simple_expression  	<Line: 18-18>(,,L31)
                                      simple_expression : term  	<Line: 18-18>(,,L31)
                                       term : term MULOP unary_expression 	<Line: 18-18>(,,L31)
                                        term :	unary_expression  	<Line: 18-18>(,,L31)
                                         unary_expression : factor  	<Line: 18-18>(,,L31)
                                          factor : LPAREN expression RPAREN 	<Line: 18-18>(,,L31)
                                           LPAREN : ( 	<Line: 18>
                                           expression 	: logic_expression	  	<Line: 18-18>(,,L31)
                                            logic_expression : rel_expression 	  	<Line: 18-18>(,,L31)
                                             rel_expression	: simple_expression  	<Line: 18-18>(,,L31)
                                              simple_expression : simple_expression ADDOP term   	<Line: 18-18>(,,L31)
                                               simple_expression : simple_expression ADDOP term   	<Line: 18-18>(,,L31)
                                                simple_expression : term  	<Line: 18-18>(,,L31)
                                                 term :	unary_expression  	<Line: 18-18>(,,L31)
                                                  unary_expression : factor  	<Line: 18-18>(,,L31)
                                                   factor : CONST_INT  	<Line: 18-18>(,,L31)
                                                    CONST_INT : 1 	<Line: 18>
                                                ADDOP : + 	<Line: 18>
                                                term : term MULOP unary_expression 	<Line: 18-18>(,,L31)
                                                 term :	unary_expression  	<Line: 18-18>(,,L31)
                                                  unary_expression : factor  	<Line: 18-18>(,,L31)
                                                   factor : CONST_INT  	<Line: 18-18>(,,L31)
                                                    CONST_INT : 3 	<Line: 18>
                                                 MULOP : * 	<Line: 18>
                                                 unary_expression : factor  	<Line: 18-18>(,,L31)
                                                  factor : CONST_INT  	<Line: 18-18>(,,L31)
                                                   CONST_INT : 5 	<Line: 18>
                                               ADDOP : + 	<Line: 18>
                                               term :	unary_expression  	<Line: 18-18>(,,L31)
                                                unary_expression : factor  	<Line: 18-18>(,,L31)
                                                 factor : CONST_INT  	<Line: 18-18>(,,L31)
                                                  CONST_INT : 8 	<Line: 18>
                                           RPAREN : ) 	<Line: 18>
                                        MULOP : % 	<Line: 18>
                                        unary_expression : factor  	<Line: 18-18>(,,L31)
                                         factor : CONST_INT  	<Line: 18-18>(,,L31)
                                          CONST_INT : 9 	<Line: 18>
                                   SEMICOLON : ; 	<Line: 18>
                                statement : expression_statement 	<Line: 19-19>(,,L30)
                                 expression_statement : expression SEMICOLON 	<Line: 19-19>(,,L30)
                                  expression : variable ASSIGNOP logic_expression 	<Line: 19-19>(,,L30)
                                   variable : ID 	  	<Line: 19-19>(,,)
                                    ID : t 	<Line: 19>
                                   ASSIGNOP : = 	<Line: 19>
                                   logic_expression : rel_expression 	  	<Line: 19-19>(,,L30)
                                    rel_expression	: simple_expression  	<Line: 19-19>(,,L30)
                                     simple_expression : term  	<Line: 19-19>(,,L30)
                                      term :	unary_expression  	<Line: 19-19>(,,L30)
                                       unary_expression : factor  	<Line: 19-19>(,,L30)
                                        factor	: variable  	<Line: 19-19>(,,L30)
                                         variable : ID LSQUARE expression RSQUARE 	<Line: 19-19>(,,)
                                          ID : b 	<Line: 19>
                                          LSQUARE : [ 	<Line: 19>
                                          expression 	: logic_expression	  	<Line: 19-19>(,,)
                                           logic_expression : rel_expression 	  	<Line: 19-19>(,,)
                                            rel_expression	: simple_expression  	<Line: 19-19>(,,)
                                             simple_expression : term  	<Line: 19-19>(,,)
                                              term :	unary_expression  	<Line: 19-19>(,,)
                                               unary_expression : factor  	<Line: 19-19>(,,)
                                                factor : CONST_INT  	<Line: 19-19>(,,)
                                                 CONST_INT : 2 	<Line: 19>
                                          RSQUARE : ] 	<Line: 19>
                                  SEMICOLON : ; 	<Line: 19>
                               statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 20-20>(,,L29)
                                PRINTLN : println 	<Line: 20>
                                LPAREN : ( 	<Line: 20>
                                ID : t 	<Line: 20>
                                RPAREN : ) 	<Line: 20>
                                SEMICOLON : ; 	<Line: 20>
                              statement : expression_statement 	<Line: 21-21>(,,L28)
                               expression_statement : expression SEMICOLON 	<Line: 21-21>(,,L28)
                                expression : variable ASSIGNOP logic_expression 	<Line: 21-21>(,,L28)
                                 variable : ID LSQUARE expression RSQUARE 	<Line: 21-21>(,,)
                                  ID : b 	<Line: 21>
                                  LSQUARE : [ 	<Line: 21>
                                  expression 	: logic_expression	  	<Line: 21-21>(,,)
                                   logic_expression : rel_expression 	  	<Line: 21-21>(,,)
                                    rel_expression	: simple_expression  	<Line: 21-21>(,,)
                                     simple_expression : term  	<Line: 21-21>(,,)
                                      term :	unary_expression  	<Line: 21-21>(,,)
                                       unary_expression : factor  	<Line: 21-21>(,,)
                                        factor : CONST_INT  	<Line: 21-21>(,,)
                                         CONST_INT : 3 	<Line: 21>
                                  RSQUARE : ] 	<Line: 21>
                                 ASSIGNOP : = 	<Line: 21>
                                 logic_expression : rel_expression 	  	<Line: 21-21>(,,L28)
                                  rel_expression	: simple_expression  	<Line: 21-21>(,,L28)
                                   simple_expression : simple_expression ADDOP term   	<Line: 21-21>(,,L28)
                                    simple_expression : simple_expression ADDOP term   	<Line: 21-21>(,,L28)
                                     simple_expression : term  	<Line: 21-21>(,,L28)
                                      term :	unary_expression  	<Line: 21-21>(,,L28)
                                       unary_expression : factor  	<Line: 21-21>(,,L28)
                                        factor	: variable  	<Line: 21-21>(,,L28)
                                         variable : ID LSQUARE expression RSQUARE 	<Line: 21-21>(,,)
                                          ID : b 	<Line: 21>
                                          LSQUARE : [ 	<Line: 21>
                                          expression 	: logic_expression	  	<Line: 21-21>(,,)
                                           logic_expression : rel_expression 	  	<Line: 21-21>(,,)
                                            rel_expression	: simple_expression  	<Line: 21-21>(,,)
                                             simple_expression : term  	<Line: 21-21>(,,)
                                              term :	unary_expression  	<Line: 21-21>(,,)
                                               unary_expression : factor  	<Line: 21-21>(,,)
                                                factor : CONST_INT  	<Line: 21-21>(,,)
                                                 CONST_INT : 2 	<Line: 21>
                                          RSQUARE : ] 	<Line: 21>
                                     ADDOP : + 	<Line: 21>
                                     term :	unary_expression  	<Line: 21-21>(,,L28)
                                      unary_expression : factor  	<Line: 21-21>(,,L28)
                                       factor : CONST_INT  	<Line: 21-21>(,,L28)
                                        CONST_INT : 5 	<Line: 21>
                                    ADDOP : + 	<Line: 21>
                                    term :	unary_expression  	<Line: 21-21>(,,L28)
                                     unary_expression : factor  	<Line: 21-21>(,,L28)
                                      factor	: variable  	<Line: 21-21>(,,L28)
                                       variable : ID 	  	<Line: 21-21>(,,)
                                        ID : c 	<Line: 21>
                                SEMICOLON : ; 	<Line: 21>
                             statement : expression_statement 	<Line: 22-22>(,,L27)
                              expression_statement : expression SEMICOLON 	<Line: 22-22>(,,L27)
                               expression : variable ASSIGNOP logic_expression 	<Line: 22-22>(,,L27)
                                variable : ID LSQUARE expression RSQUARE 	<Line: 22-22>(,,)
                                 ID : d 	<Line: 22>
                                 LSQUARE : [ 	<Line: 22>
                                 expression 	: logic_expression	  	<Line: 22-22>(,,)
                                  logic_expression : rel_expression 	  	<Line: 22-22>(,,)
                                   rel_expression	: simple_expression  	<Line: 22-22>(,,)
                                    simple_expression : term  	<Line: 22-22>(,,)
                                     term :	unary_expression  	<Line: 22-22>(,,)
                                      unary_expression : factor  	<Line: 22-22>(,,)
                                       factor : CONST_INT  	<Line: 22-22>(,,)
                                        CONST_INT : 3 	<Line: 22>
                                 RSQUARE : ] 	<Line: 22>
                                ASSIGNOP : = 	<Line: 22>
                                logic_expression : rel_expression 	  	<Line: 22-22>(,,L27)
                                 rel_expression	: simple_expression  	<Line: 22-22>(,,L27)
                                  simple_expression : term  	<Line: 22-22>(,,L27)
                                   term :	unary_expression  	<Line: 22-22>(,,L27)
                                    unary_expression : factor  	<Line: 22-22>(,,L27)
                                     factor	: variable  	<Line: 22-22>(,,L27)
                                      variable : ID LSQUARE expression RSQUARE 	<Line: 22-22>(,,)
                                       ID : b 	<Line: 22>
                                       LSQUARE : [ 	<Line: 22>
                                       expression 	: logic_expression	  	<Line: 22-22>(,,)
                                        logic_expression : rel_expression 	  	<Line: 22-22>(,,)
                                         rel_expression	: simple_expression  	<Line: 22-22>(,,)
                                          simple_expression : term  	<Line: 22-22>(,,)
                                           term :	unary_expression  	<Line: 22-22>(,,)
                                            unary_expression : factor  	<Line: 22-22>(,,)
                                             factor : CONST_INT  	<Line: 22-22>(,,)
                                              CONST_INT : 3 	<Line: 22>
                                       RSQUARE : ] 	<Line: 22>
                               SEMICOLON : ; 	<Line: 22>
                            statement : expression_statement 	<Line: 23-23>(,,L26)
                             expression_statement : expression SEMICOLON 	<Line: 23-23>(,,L26)
                              expression : variable ASSIGNOP logic_expression 	<Line: 23-23>(,,L26)
                               variable : ID 	  	<Line: 23-23>(,,)
                                ID : t 	<Line: 23>
                               ASSIGNOP : = 	<Line: 23>
                               logic_expression : rel_expression 	  	<Line: 23-23>(,,L26)
                                rel_expression	: simple_expression  	<Line: 23-23>(,,L26)
                                 simple_expression : term  	<Line: 23-23>(,,L26)
                                  term :	unary_expression  	<Line: 23-23>(,,L26)
                                   unary_expression : factor  	<Line: 23-23>(,,L26)
                                    factor	: variable  	<Line: 23-23>(,,L26)
                                     variable : ID LSQUARE expression RSQUARE 	<Line: 23-23>(,,)
                                      ID : d 	<Line: 23>
                                      LSQUARE : [ 	<Line: 23>
                                      expression 	: logic_expression	  	<Line: 23-23>(,,)
                                       logic_expression : rel_expression 	  	<Line: 23-23>(,,)
                                        rel_expression	: simple_expression  	<Line: 23-23>(,,)
                                         simple_expression : term  	<Line: 23-23>(,,)
                                          term :	unary_expression  	<Line: 23-23>(,,)
                                           unary_expression : factor  	<Line: 23-23>(,,)
                                            factor : CONST_INT  	<Line: 23-23>(,,)
                                             CONST_INT : 3 	<Line: 23>
                                      RSQUARE : ] 	<Line: 23>
                              SEMICOLON : ; 	<Line: 23>
                           statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 24-24>(,,L25)
                            PRINTLN : println 	<Line: 24>
                            LPAREN : ( 	<Line: 24>
                            ID : t 	<Line: 24>
                            RPAREN : ) 	<Line: 24>
                            SEMICOLON : ; 	<Line: 24>
                          statement : expression_statement 	<Line: 25-25>(,,L24)
                           expression_statement : expression SEMICOLON 	<Line: 25-25>(,,L24)
                            expression 	: logic_expression	  	<Line: 25-25>(,,L24)
                             logic_expression : rel_expression 	  	<Line: 25-25>(,,L24)
                              rel_expression	: simple_expression  	<Line: 25-25>(,,L24)
                               simple_expression : term  	<Line: 25-25>(,,L24)
                                term :	unary_expression  	<Line: 25-25>(,,L24)
                                 unary_expression : factor  	<Line: 25-25>(,,L24)
                                  factor : variable INCOP  	<Line: 25-25>(,,L24)
                                   variable : ID LSQUARE expression RSQUARE 	<Line: 25-25>(,,)
                                    ID : d 	<Line: 25>
                                    LSQUARE : [ 	<Line: 25>
                                    expression 	: logic_expression	  	<Line: 25-25>(,,)
                                     logic_expression : rel_expression 	  	<Line: 25-25>(,,)
                                      rel_expression	: simple_expression  	<Line: 25-25>(,,)
                                       simple_expression : term  	<Line: 25-25>(,,)
                                        term :	unary_expression  	<Line: 25-25>(,,)
                                         unary_expression : factor  	<Line: 25-25>(,,)
                                          factor : CONST_INT  	<Line: 25-25>(,,)
                                           CONST_INT : 3 	<Line: 25>
                                    RSQUARE : ] 	<Line: 25>
                                   INCOP : ++ 	<Line: 25>
                            SEMICOLON : ; 	<Line: 25>
                         statement : expression_statement 	<Line: 26-26>(,,L23)
                          expression_statement : expression SEMICOLON 	<Line: 26-26>(,,L23)
                           expression : variable ASSIGNOP logic_expression 	<Line: 26-26>(,,L23)
                            variable : ID 	  	<Line: 26-26>(,,)
                             ID : t 	<Line: 26>
                            ASSIGNOP : = 	<Line: 26>
                            logic_expression : rel_expression 	  	<Line: 26-26>(,,L23)
                             rel_expression	: simple_expression  	<Line: 26-26>(,,L23)
                              simple_expression : term  	<Line: 26-26>(,,L23)
                               term :	unary_expression  	<Line: 26-26>(,,L23)
                                unary_expression : factor  	<Line: 26-26>(,,L23)
                                 factor	: variable  	<Line: 26-26>(,,L23)
                                  variable : ID LSQUARE expression RSQUARE 	<Line: 26-26>(,,)
                                   ID : d 	<Line: 26>
                                   LSQUARE : [ 	<Line: 26>
                                   expression 	: logic_expression	  	<Line: 26-26>(,,)
                                    logic_expression : rel_expression 	  	<Line: 26-26>(,,)
                                     rel_expression	: simple_expression  	<Line: 26-26>(,,)
                                      simple_expression : term  	<Line: 26-26>(,,)
                                       term :	unary_expression  	<Line: 26-26>(,,)
                                        unary_expression : factor  	<Line: 26-26>(,,)
                                         factor : CONST_INT  	<Line: 26-26>(,,)
                                          CONST_INT : 3 	<Line: 26>
                                   RSQUARE : ] 	<Line: 26>
                           SEMICOLON : ; 	<Line: 26>
                        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 27-27>(,,L22)
                         PRINTLN : println 	<Line: 27>
                         LPAREN : ( 	<Line: 27>
                         ID : t 	<Line: 27>
                         RPAREN : ) 	<Line: 27>
                         SEMICOLON : ; 	<Line: 27>
                       statement : expression_statement 	<Line: 28-28>(,,L21)
                        expression_statement : expression SEMICOLON 	<Line: 28-28>(,,L21)
                         expression 	: logic_expression	  	<Line: 28-28>(,,L21)
                          logic_expression : rel_expression 	  	<Line: 28-28>(,,L21)
                           rel_expression	: simple_expression  	<Line: 28-28>(,,L21)
                            simple_expression : term  	<Line: 28-28>(,,L21)
                             term :	unary_expression  	<Line: 28-28>(,,L21)
                              unary_expression : factor  	<Line: 28-28>(,,L21)
                               factor : variable DECOP 	<Line: 28-28>(,,L21)
                                variable : ID LSQUARE expression RSQUARE 	<Line: 28-28>(,,)
                                 ID : d 	<Line: 28>
                                 LSQUARE : [ 	<Line: 28>
                                 expression 	: logic_expression	  	<Line: 28-28>(,,)
                                  logic_expression : rel_expression 	  	<Line: 28-28>(,,)
                                   rel_expression	: simple_expression  	<Line: 28-28>(,,)
                                    simple_expression : term  	<Line: 28-28>(,,)
                                     term :	unary_expression  	<Line: 28-28>(,,)
                                      unary_expression : factor  	<Line: 28-28>(,,)
                                       factor : CONST_INT  	<Line: 28-28>(,,)
                                        CONST_INT : 3 	<Line: 28>
                                 RSQUARE : ] 	<Line: 28>
                                DECOP : -- 	<Line: 28>
                         SEMICOLON : ; 	<Line: 28>
                      statement : expression_statement 	<Line: 29-29>(,,L20)
                       expression_statement : expression SEMICOLON 	<Line: 29-29>(,,L20)
                        expression 	: logic_expression	  	<Line: 29-29>(,,L20)
                         logic_expression : rel_expression 	  	<Line: 29-29>(,,L20)
                          rel_expression	: simple_expression  	<Line: 29-29>(,,L20)
                           simple_expression : term  	<Line: 29-29>(,,L20)
                            term :	unary_expression  	<Line: 29-29>(,,L20)
                             unary_expression : factor  	<Line: 29-29>(,,L20)
                              factor : variable DECOP 	<Line: 29-29>(,,L20)
                               variable : ID LSQUARE expression RSQUARE 	<Line: 29-29>(,,)
                                ID : d 	<Line: 29>
                                LSQUARE : [ 	<Line: 29>
                                expression 	: logic_expression	  	<Line: 29-29>(,,)
                                 logic_expression : rel_expression 	  	<Line: 29-29>(,,)
                                  rel_expression	: simple_expression  	<Line: 29-29>(,,)
                                   simple_expression : term  	<Line: 29-29>(,,)
                                    term :	unary_expression  	<Line: 29-29>(,,)
                                     unary_expression : factor  	<Line: 29-29>(,,)
                                      factor : CONST_INT  	<Line: 29-29>(,,)
                                       CONST_INT : 3 	<Line: 29>
                                RSQUARE : ] 	<Line: 29>
                               DECOP : -- 	<Line: 29>
                        SEMICOLON : ; 	<Line: 29>
                     statement : expression_statement 	<Line: 30-30>(,,L19)
                      expression_statement : expression SEMICOLON 	<Line: 30-30>(,,L19)
                       expression : variable ASSIGNOP logic_expression 	<Line: 30-30>(,,L19)
                        variable : ID 	  	<Line: 30-30>(,,)
                         ID : t 	<Line: 30>
                        ASSIGNOP : = 	<Line: 30>
                        logic_expression : rel_expression 	  	<Line: 30-30>(,,L19)
                         rel_expression	: simple_expression  	<Line: 30-30>(,,L19)
                          simple_expression : term  	<Line: 30-30>(,,L19)
                           term :	unary_expression  	<Line: 30-30>(,,L19)
                            unary_expression : factor  	<Line: 30-30>(,,L19)
                             factor	: variable  	<Line: 30-30>(,,L19)
                              variable : ID LSQUARE expression RSQUARE 	<Line: 30-30>(,,)
                               ID : d 	<Line: 30>
                               LSQUARE : [ 	<Line: 30>
                               expression 	: logic_expression	  	<Line: 30-30>(,,)
                                logic_expression : rel_expression 	  	<Line: 30-30>(,,)
                                 rel_expression	: simple_expression  	<Line: 30-30>(,,)
                                  simple_expression : term  	<Line: 30-30>(,,)
                                   term :	unary_expression  	<Line: 30-30>(,,)
                                    unary_expression : factor  	<Line: 30-30>(,,)
                                     factor : CONST_INT  	<Line: 30-30>(,,)
                                      CONST_INT : 3 	<Line: 30>
                               RSQUARE : ] 	<Line: 30>
                       SEMICOLON : ; 	<Line: 30>
                    statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 31-31>(,,L18)
                     PRINTLN : println 	<Line: 31>
                     LPAREN : ( 	<Line: 31>
                     ID : t 	<Line: 31>
                     RPAREN : ) 	<Line: 31>
                     SEMICOLON : ; 	<Line: 31>
                   statement : expression_statement 	<Line: 32-32>(,,L17)
                    expression_statement : expression SEMICOLON 	<Line: 32-32>(,,L17)
                     expression : variable ASSIGNOP logic_expression 	<Line: 32-32>(,,L17)
                      variable : ID LSQUARE expression RSQUARE 	<Line: 32-32>(,,)
                       ID : d 	<Line: 32>
                       LSQUARE : [ 	<Line: 32>
                       expression 	: logic_expression	  	<Line: 32-32>(,,)
                        logic_expression : rel_expression 	  	<Line: 32-32>(,,)
                         rel_expression	: simple_expression  	<Line: 32-32>(,,)
                          simple_expression : term  	<Line: 32-32>(,,)
                           term :	unary_expression  	<Line: 32-32>(,,)
                            unary_expression : factor  	<Line: 32-32>(,,)
                             factor : CONST_INT  	<Line: 32-32>(,,)
                              CONST_INT : 3 	<Line: 32>
                       RSQUARE : ] 	<Line: 32>
                      ASSIGNOP : = 	<Line: 32>
                      logic_expression : rel_expression 	  	<Line: 32-32>(,,L17)
                       rel_expression	: simple_expression  	<Line: 32-32>(,,L17)
                        simple_expression : term  	<Line: 32-32>(,,L17)
                         term :	unary_expression  	<Line: 32-32>(,,L17)
                          unary_expression : factor  	<Line: 32-32>(,,L17)
                           factor : CONST_INT  	<Line: 32-32>(,,L17)
                            CONST_INT : 5 	<Line: 32>
                     SEMICOLON : ; 	<Line: 32>
                  statement : expression_statement 	<Line: 33-33>(,,L16)
                   expression_statement : expression SEMICOLON 	<Line: 33-33>(,,L16)
                    expression : variable ASSIGNOP logic_expression 	<Line: 33-33>(,,L16)
                     variable : ID 	  	<Line: 33-33>(,,)
                      ID : t 	<Line: 33>
                     ASSIGNOP : = 	<Line: 33>
                     logic_expression : rel_expression 	  	<Line: 33-33>(,,L16)
                      rel_expression	: simple_expression  	<Line: 33-33>(,,L16)
                       simple_expression : term  	<Line: 33-33>(,,L16)
                        term :	unary_expression  	<Line: 33-33>(,,L16)
                         unary_expression : factor  	<Line: 33-33>(,,L16)
                          factor	: variable  	<Line: 33-33>(,,L16)
                           variable : ID LSQUARE expression RSQUARE 	<Line: 33-33>(,,)
                            ID : d 	<Line: 33>
                            LSQUARE : [ 	<Line: 33>
                            expression 	: logic_expression	  	<Line: 33-33>(,,)
                             logic_expression : rel_expression 	  	<Line: 33-33>(,,)
                              rel_expression	: simple_expression  	<Line: 33-33>(,,)
                               simple_expression : term  	<Line: 33-33>(,,)
                                term :	unary_expression  	<Line: 33-33>(,,)
                                 unary_expression : factor  	<Line: 33-33>(,,)
                                  factor : CONST_INT  	<Line: 33-33>(,,)
                                   CONST_INT : 3 	<Line: 33>
                            RSQUARE : ] 	<Line: 33>
                    SEMICOLON : ; 	<Line: 33>
                 statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 34-34>(,,L15)
                  PRINTLN : println 	<Line: 34>
                  LPAREN : ( 	<Line: 34>
                  ID : t 	<Line: 34>
                  RPAREN : ) 	<Line: 34>
                  SEMICOLON : ; 	<Line: 34>
                statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 36-36>(,,L14)
                 PRINTLN : println 	<Line: 36>
                 LPAREN : ( 	<Line: 36>
                 ID : c 	<Line: 36>
                 RPAREN : ) 	<Line: 36>
                 SEMICOLON : ; 	<Line: 36>
               statement : expression_statement 	<Line: 37-37>(,,L13)
                expression_statement : expression SEMICOLON 	<Line: 37-37>(,,L13)
                 expression 	: logic_expression	  	<Line: 37-37>(,,L13)
                  logic_expression : rel_expression 	  	<Line: 37-37>(,,L13)
                   rel_expression	: simple_expression  	<Line: 37-37>(,,L13)
                    simple_expression : term  	<Line: 37-37>(,,L13)
                     term :	unary_expression  	<Line: 37-37>(,,L13)
                      unary_expression : factor  	<Line: 37-37>(,,L13)
                       factor : variable INCOP  	<Line: 37-37>(,,L13)
                        variable : ID 	  	<Line: 37-37>(,,)
                         ID : c 	<Line: 37>
                        INCOP : ++ 	<Line: 37>
                 SEMICOLON : ; 	<Line: 37>
              statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 38-38>(,,L12)
               PRINTLN : println 	<Line: 38>
               LPAREN : ( 	<Line: 38>
               ID : c 	<Line: 38>
               RPAREN : ) 	<Line: 38>
               SEMICOLON : ; 	<Line: 38>
             statement : expression_statement 	<Line: 39-39>(,,L11)
              expression_statement : expression SEMICOLON 	<Line: 39-39>(,,L11)
               expression 	: logic_expression	  	<Line: 39-39>(,,L11)
                logic_expression : rel_expression 	  	<Line: 39-39>(,,L11)
                 rel_expression	: simple_expression  	<Line: 39-39>(,,L11)
                  simple_expression : term  	<Line: 39-39>(,,L11)
                   term :	unary_expression  	<Line: 39-39>(,,L11)
                    unary_expression : factor  	<Line: 39-39>(,,L11)
                     factor : variable DECOP 	<Line: 39-39>(,,L11)
                      variable : ID 	  	<Line: 39-39>(,,)
                       ID : c 	<Line: 39>
                      DECOP : -- 	<Line: 39>
               SEMICOLON : ; 	<Line: 39>
            statement : expression_statement 	<Line: 40-40>(,,L10)
             expression_statement : expression SEMICOLON 	<Line: 40-40>(,,L10)
              expression 	: logic_expression	  	<Line: 40-40>(,,L10)
               logic_expression : rel_expression 	  	<Line: 40-40>(,,L10)
                rel_expression	: simple_expression  	<Line: 40-40>(,,L10)
                 simple_expression : term  	<Line: 40-40>(,,L10)
                  term :	unary_expression  	<Line: 40-40>(,,L10)
                   unary_expression : factor  	<Line: 40-40>(,,L10)
                    factor : variable DECOP 	<Line: 40-40>(,,L10)
                     variable : ID 	  	<Line: 40-40>(,,)
                      ID : c 	<Line: 40>
                     DECOP : -- 	<Line: 40>
              SEMICOLON : ; 	<Line: 40>
           statement : expression_statement 	<Line: 41-41>(,,L9)
            expression_statement : expression SEMICOLON 	<Line: 41-41>(,,L9)
             expression 	: logic_expression	  	<Line: 41-41>(,,L9)
              logic_expression : rel_expression 	  	<Line: 41-41>(,,L9)
               rel_expression	: simple_expression  	<Line: 41-41>(,,L9)
                simple_expression : term  	<Line: 41-41>(,,L9)
                 term :	unary_expression  	<Line: 41-41>(,,L9)
                  unary_expression : factor  	<Line: 41-41>(,,L9)
                   factor : variable DECOP 	<Line: 41-41>(,,L9)
                    variable : ID 	  	<Line: 41-41>(,,)
                     ID : c 	<Line: 41>
                    DECOP : -- 	<Line: 41>
             SEMICOLON : ; 	<Line: 41>
          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 42-42>(,,L8)
           PRINTLN : println 	<Line: 42>
           LPAREN : ( 	<Line: 42>
           ID : c 	<Line: 42>
           RPAREN : ) 	<Line: 42>
           SEMICOLON : ; 	<Line: 42>
         statement : expression_statement 	<Line: 44-44>(,,L7)
          expression_statement : expression SEMICOLON 	<Line: 44-44>(,,L7)
           expression 	: logic_expression	  	<Line: 44-44>(,,L7)
            logic_expression : rel_expression 	  	<Line: 44-44>(,,L7)
             rel_expression	: simple_expression  	<Line: 44-44>(,,L7)
              simple_expression : term  	<Line: 44-44>(,,L7)
               term :	unary_expression  	<Line: 44-44>(,,L7)
                unary_expression : factor  	<Line: 44-44>(,,L7)
                 factor : ID LPAREN argument_list RPAREN 	<Line: 44-44>(,,L7)
                  ID : g 	<Line: 44>
                  LPAREN : ( 	<Line: 44>
                  argument_list : arguments 	<Line: 44-44>(,,)
                   arguments : logic_expression 	<Line: 44-44>(,,)
                    logic_expression : rel_expression 	  	<Line: 44-44>(,,)
                     rel_expression	: simple_expression  	<Line: 44-44>(,,)
                      simple_expression : term  	<Line: 44-44>(,,)
                       term :	unary_expression  	<Line: 44-44>(,,)
                        unary_expression : factor  	<Line: 44-44>(,,)
                         factor : CONST_INT  	<Line: 44-44>(,,)
                          CONST_INT : 212 	<Line: 44>
                  RPAREN : ) 	<Line: 44>
           SEMICOLON : ; 	<Line: 44>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 45-45>(,,L6)
         PRINTLN : println 	<Line: 45>
         LPAREN : ( 	<Line: 45>
         ID : g1 	<Line: 45>
         RPAREN : ) 	<Line: 45>
         SEMICOLON : ; 	<Line: 45>
       statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 46-46>(,,L5)
        PRINTLN : println 	<Line: 46>
        LPAREN : ( 	<Line: 46>
        ID : g2 	<Line: 46>
        RPAREN : ) 	<Line: 46>
        SEMICOLON : ; 	<Line: 46>
      RCURL : } 	<Line: 51>
  unit : var_declaration   	<Line: 52-52>(,,)
   var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 52-52>(,,)
    type_specifier	: INT  	<Line: 52-52>(,,)
     INT : int 	<Line: 52>
    declaration_list : declaration_list COMMA ID   	<Line: 52-52>(,,)
     declaration_list : ID  	<Line: 52-52>(,,)
      ID : g1 	<Line: 52>
     COMMA : , 	<Line: 52>
     ID : g2 	<Line: 52>
    SEMICOLON : ; 	<Line: 52>
