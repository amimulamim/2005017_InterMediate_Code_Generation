start : program 	<Line: 1-12>
 program : unit  	<Line: 1-12>
  unit : func_definition  	<Line: 1-12>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-12>
    type_specifier	: VOID 	<Line: 1-1>
     VOID : void 	<Line: 1>
    ID : main 	<Line: 1>
    LPAREN : ( 	<Line: 1>
    RPAREN : ) 	<Line: 1>
    compound_statement : LCURL statements RCURL   	<Line: 1-12>
     LCURL : { 	<Line: 1>
     statements : statements statement  	<Line: 2-10>
      statements : statements statement  	<Line: 2-9>
       statements : statements statement  	<Line: 2-8>
        statements : statements statement  	<Line: 2-7>
         statements : statements statement  	<Line: 2-6>
          statements : statements statement  	<Line: 2-5>
           statements : statements statement  	<Line: 2-4>
            statements : statements statement  	<Line: 2-3>
             statements : statement   	<Line: 2-2>
              statement : var_declaration 	<Line: 2-2>
               var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 2-2>
                type_specifier	: INT  	<Line: 2-2>
                 INT : int 	<Line: 2>
                declaration_list : declaration_list COMMA ID   	<Line: 2-2>
                 declaration_list : ID  	<Line: 2-2>
                  ID : a 	<Line: 2>
                 COMMA : , 	<Line: 2>
                 ID : b 	<Line: 2>
                SEMICOLON : ; 	<Line: 2>
             statement : expression_statement 	<Line: 3-3>
              expression_statement : expression SEMICOLON 	<Line: 3-3>
               expression : variable ASSIGNOP logic_expression 	<Line: 3-3>
                variable : ID 	  	<Line: 3-3>
                 ID : a 	<Line: 3>
                ASSIGNOP : = 	<Line: 3>
                logic_expression : rel_expression 	  	<Line: 3-3>
                 rel_expression : simple_expression RELOP simple_expression 	<Line: 3-3>
                  simple_expression : term  	<Line: 3-3>
                   term :	unary_expression  	<Line: 3-3>
                    unary_expression : factor  	<Line: 3-3>
                     factor : CONST_INT  	<Line: 3-3>
                      CONST_INT : 1 	<Line: 3>
                  RELOP : < 	<Line: 3>
                  simple_expression : term  	<Line: 3-3>
                   term :	unary_expression  	<Line: 3-3>
                    unary_expression : factor  	<Line: 3-3>
                     factor : CONST_INT  	<Line: 3-3>
                      CONST_INT : 5 	<Line: 3>
               SEMICOLON : ; 	<Line: 3>
            statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 4-4>
             PRINTLN : println 	<Line: 4>
             LPAREN : ( 	<Line: 4>
             ID : a 	<Line: 4>
             RPAREN : ) 	<Line: 4>
             SEMICOLON : ; 	<Line: 4>
           statement : expression_statement 	<Line: 5-5>
            expression_statement : expression SEMICOLON 	<Line: 5-5>
             expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
              variable : ID 	  	<Line: 5-5>
               ID : b 	<Line: 5>
              ASSIGNOP : = 	<Line: 5>
              logic_expression : rel_expression 	  	<Line: 5-5>
               rel_expression : simple_expression RELOP simple_expression 	<Line: 5-5>
                simple_expression : term  	<Line: 5-5>
                 term :	unary_expression  	<Line: 5-5>
                  unary_expression : factor  	<Line: 5-5>
                   factor	: variable  	<Line: 5-5>
                    variable : ID 	  	<Line: 5-5>
                     ID : a 	<Line: 5>
                RELOP : == 	<Line: 5>
                simple_expression : term  	<Line: 5-5>
                 term :	unary_expression  	<Line: 5-5>
                  unary_expression : factor  	<Line: 5-5>
                   factor : CONST_INT  	<Line: 5-5>
                    CONST_INT : 0 	<Line: 5>
             SEMICOLON : ; 	<Line: 5>
          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 6-6>
           PRINTLN : println 	<Line: 6>
           LPAREN : ( 	<Line: 6>
           ID : b 	<Line: 6>
           RPAREN : ) 	<Line: 6>
           SEMICOLON : ; 	<Line: 6>
         statement : expression_statement 	<Line: 7-7>
          expression_statement : expression SEMICOLON 	<Line: 7-7>
           expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
            variable : ID 	  	<Line: 7-7>
             ID : b 	<Line: 7>
            ASSIGNOP : = 	<Line: 7>
            logic_expression : rel_expression 	  	<Line: 7-7>
             rel_expression : simple_expression RELOP simple_expression 	<Line: 7-7>
              simple_expression : term  	<Line: 7-7>
               term :	unary_expression  	<Line: 7-7>
                unary_expression : factor  	<Line: 7-7>
                 factor	: variable  	<Line: 7-7>
                  variable : ID 	  	<Line: 7-7>
                   ID : a 	<Line: 7>
              RELOP : == 	<Line: 7>
              simple_expression : term  	<Line: 7-7>
               term :	unary_expression  	<Line: 7-7>
                unary_expression : factor  	<Line: 7-7>
                 factor : CONST_INT  	<Line: 7-7>
                  CONST_INT : 1 	<Line: 7>
           SEMICOLON : ; 	<Line: 7>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 8-8>
         PRINTLN : println 	<Line: 8>
         LPAREN : ( 	<Line: 8>
         ID : b 	<Line: 8>
         RPAREN : ) 	<Line: 8>
         SEMICOLON : ; 	<Line: 8>
       statement : expression_statement 	<Line: 9-9>
        expression_statement : expression SEMICOLON 	<Line: 9-9>
         expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
          variable : ID 	  	<Line: 9-9>
           ID : b 	<Line: 9>
          ASSIGNOP : = 	<Line: 9>
          logic_expression : rel_expression 	  	<Line: 9-9>
           rel_expression : simple_expression RELOP simple_expression 	<Line: 9-9>
            simple_expression : term  	<Line: 9-9>
             term :	unary_expression  	<Line: 9-9>
              unary_expression : factor  	<Line: 9-9>
               factor	: variable  	<Line: 9-9>
                variable : ID 	  	<Line: 9-9>
                 ID : a 	<Line: 9>
            RELOP : == 	<Line: 9>
            simple_expression : term  	<Line: 9-9>
             term :	unary_expression  	<Line: 9-9>
              unary_expression : factor  	<Line: 9-9>
               factor : CONST_INT  	<Line: 9-9>
                CONST_INT : 2 	<Line: 9>
         SEMICOLON : ; 	<Line: 9>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 10-10>
       PRINTLN : println 	<Line: 10>
       LPAREN : ( 	<Line: 10>
       ID : b 	<Line: 10>
       RPAREN : ) 	<Line: 10>
       SEMICOLON : ; 	<Line: 10>
     RCURL : } 	<Line: 12>
