start : program 	<Line: 1-18>(,,)
 program : program unit  	<Line: 1-18>(,,)
  program : program unit  	<Line: 1-9>(,,)
   program : unit  	<Line: 1-4>(,,)
    unit : func_definition  	<Line: 1-4>(,,)
     func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 1-4>(,,)
      type_specifier	: INT  	<Line: 1-1>(,,)
       INT : int 	<Line: 1>
      ID : f 	<Line: 1>
      LPAREN : ( 	<Line: 1>
      parameter_list  : type_specifier ID 	<Line: 1-1>(,,)
       type_specifier	: INT  	<Line: 1-1>(,,)
        INT : int 	<Line: 1>
       ID : a 	<Line: 1>
      RPAREN : ) 	<Line: 1>
      compound_statement : LCURL statements RCURL   	<Line: 1-4>(,,L0)
       LCURL : { 	<Line: 1>
       statements : statements statement  	<Line: 2-3>(,,L0)
        statements : statement   	<Line: 2-2>(,,L1)
         statement : IF LPAREN expression RPAREN statement 	<Line: 2-2>(,,L1)
          IF : if 	<Line: 2>
          LPAREN : ( 	<Line: 2>
          expression 	: logic_expression	  	<Line: 2-2>(fall,L1,)
           logic_expression : rel_expression 	  	<Line: 2-2>(fall,L1,)
            rel_expression : simple_expression RELOP simple_expression 	<Line: 2-2>(fall,L1,)
             simple_expression : term  	<Line: 2-2>(,,)
              term :	unary_expression  	<Line: 2-2>(,,)
               unary_expression : factor  	<Line: 2-2>(,,)
                factor	: variable  	<Line: 2-2>(,,)
                 variable : ID 	  	<Line: 2-2>(,,)
                  ID : a 	<Line: 2>
             RELOP : <= 	<Line: 2>
             simple_expression : term  	<Line: 2-2>(,,)
              term :	unary_expression  	<Line: 2-2>(,,)
               unary_expression : factor  	<Line: 2-2>(,,)
                factor : CONST_INT  	<Line: 2-2>(,,)
                 CONST_INT : 1 	<Line: 2>
          RPAREN : ) 	<Line: 2>
          statement : RETURN expression SEMICOLON 	<Line: 2-2>(,,L1)
           RETURN : return 	<Line: 2>
           expression 	: logic_expression	  	<Line: 2-2>(,,)
            logic_expression : rel_expression 	  	<Line: 2-2>(,,)
             rel_expression	: simple_expression  	<Line: 2-2>(,,)
              simple_expression : term  	<Line: 2-2>(,,)
               term :	unary_expression  	<Line: 2-2>(,,)
                unary_expression : factor  	<Line: 2-2>(,,)
                 factor : CONST_INT  	<Line: 2-2>(,,)
                  CONST_INT : 1 	<Line: 2>
           SEMICOLON : ; 	<Line: 2>
        statement : RETURN expression SEMICOLON 	<Line: 3-3>(,,L0)
         RETURN : return 	<Line: 3>
         expression 	: logic_expression	  	<Line: 3-3>(,,)
          logic_expression : rel_expression 	  	<Line: 3-3>(,,)
           rel_expression	: simple_expression  	<Line: 3-3>(,,)
            simple_expression : term  	<Line: 3-3>(,,)
             term : term MULOP unary_expression 	<Line: 3-3>(,,)
              term :	unary_expression  	<Line: 3-3>(,,)
               unary_expression : factor  	<Line: 3-3>(,,)
                factor	: variable  	<Line: 3-3>(,,)
                 variable : ID 	  	<Line: 3-3>(,,)
                  ID : a 	<Line: 3>
              MULOP : * 	<Line: 3>
              unary_expression : factor  	<Line: 3-3>(,,)
               factor : ID LPAREN argument_list RPAREN 	<Line: 3-3>(,,)
                ID : f 	<Line: 3>
                LPAREN : ( 	<Line: 3>
                argument_list : arguments 	<Line: 3-3>(,,)
                 arguments : logic_expression 	<Line: 3-3>(,,)
                  logic_expression : rel_expression 	  	<Line: 3-3>(,,)
                   rel_expression	: simple_expression  	<Line: 3-3>(,,)
                    simple_expression : simple_expression ADDOP term   	<Line: 3-3>(,,)
                     simple_expression : term  	<Line: 3-3>(,,)
                      term :	unary_expression  	<Line: 3-3>(,,)
                       unary_expression : factor  	<Line: 3-3>(,,)
                        factor	: variable  	<Line: 3-3>(,,)
                         variable : ID 	  	<Line: 3-3>(,,)
                          ID : a 	<Line: 3>
                     ADDOP : - 	<Line: 3>
                     term :	unary_expression  	<Line: 3-3>(,,)
                      unary_expression : factor  	<Line: 3-3>(,,)
                       factor : CONST_INT  	<Line: 3-3>(,,)
                        CONST_INT : 1 	<Line: 3>
                RPAREN : ) 	<Line: 3>
         SEMICOLON : ; 	<Line: 3>
       RCURL : } 	<Line: 4>
   unit : func_definition  	<Line: 7-9>(,,)
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 7-9>(,,)
     type_specifier	: INT  	<Line: 7-7>(,,)
      INT : int 	<Line: 7>
     ID : g 	<Line: 7>
     LPAREN : ( 	<Line: 7>
     RPAREN : ) 	<Line: 7>
     compound_statement : LCURL statements RCURL   	<Line: 7-9>(,,L3)
      LCURL : { 	<Line: 7>
      statements : statement   	<Line: 8-8>(,,L3)
       statement : RETURN expression SEMICOLON 	<Line: 8-8>(,,L3)
        RETURN : return 	<Line: 8>
        expression 	: logic_expression	  	<Line: 8-8>(,,)
         logic_expression : rel_expression 	  	<Line: 8-8>(,,)
          rel_expression	: simple_expression  	<Line: 8-8>(,,)
           simple_expression : term  	<Line: 8-8>(,,)
            term :	unary_expression  	<Line: 8-8>(,,)
             unary_expression : factor  	<Line: 8-8>(,,)
              factor : CONST_INT  	<Line: 8-8>(,,)
               CONST_INT : 1 	<Line: 8>
        SEMICOLON : ; 	<Line: 8>
      RCURL : } 	<Line: 9>
  unit : func_definition  	<Line: 10-18>(,,)
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 10-18>(,,)
    type_specifier	: VOID 	<Line: 10-10>(,,)
     VOID : void 	<Line: 10>
    ID : main 	<Line: 10>
    LPAREN : ( 	<Line: 10>
    RPAREN : ) 	<Line: 10>
    compound_statement : LCURL statements RCURL   	<Line: 10-18>(,,L5)
     LCURL : { 	<Line: 10>
     statements : statements statement  	<Line: 11-17>(,,L5)
      statements : statements statement  	<Line: 11-16>(,,L6)
       statements : statements statement  	<Line: 11-15>(,,L7)
        statements : statements statement  	<Line: 11-14>(,,L8)
         statements : statements statement  	<Line: 11-13>(,,L9)
          statements : statements statement  	<Line: 11-12>(,,L10)
           statements : statement   	<Line: 11-11>(,,L11)
            statement : var_declaration 	<Line: 11-11>(,,L11)
             var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 11-11>(,,L11)
              type_specifier	: INT  	<Line: 11-11>(,,)
               INT : int 	<Line: 11>
              declaration_list : declaration_list COMMA ID   	<Line: 11-11>(,,)
               declaration_list : ID  	<Line: 11-11>(,,)
                ID : x 	<Line: 11>
               COMMA : , 	<Line: 11>
               ID : y 	<Line: 11>
              SEMICOLON : ; 	<Line: 11>
           statement : expression_statement 	<Line: 12-12>(,,L10)
            expression_statement : expression SEMICOLON 	<Line: 12-12>(,,L10)
             expression : variable ASSIGNOP logic_expression 	<Line: 12-12>(,,L10)
              variable : ID 	  	<Line: 12-12>(,,)
               ID : x 	<Line: 12>
              ASSIGNOP : = 	<Line: 12>
              logic_expression : rel_expression 	  	<Line: 12-12>(,,L10)
               rel_expression	: simple_expression  	<Line: 12-12>(,,L10)
                simple_expression : term  	<Line: 12-12>(,,L10)
                 term :	unary_expression  	<Line: 12-12>(,,L10)
                  unary_expression : factor  	<Line: 12-12>(,,L10)
                   factor : ID LPAREN argument_list RPAREN 	<Line: 12-12>(,,L10)
                    ID : f 	<Line: 12>
                    LPAREN : ( 	<Line: 12>
                    argument_list : arguments 	<Line: 12-12>(,,)
                     arguments : logic_expression 	<Line: 12-12>(,,)
                      logic_expression : rel_expression 	  	<Line: 12-12>(,,)
                       rel_expression	: simple_expression  	<Line: 12-12>(,,)
                        simple_expression : term  	<Line: 12-12>(,,)
                         term :	unary_expression  	<Line: 12-12>(,,)
                          unary_expression : factor  	<Line: 12-12>(,,)
                           factor : CONST_INT  	<Line: 12-12>(,,)
                            CONST_INT : 5 	<Line: 12>
                    RPAREN : ) 	<Line: 12>
             SEMICOLON : ; 	<Line: 12>
          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>(,,L9)
           PRINTLN : println 	<Line: 13>
           LPAREN : ( 	<Line: 13>
           ID : x 	<Line: 13>
           RPAREN : ) 	<Line: 13>
           SEMICOLON : ; 	<Line: 13>
         statement : expression_statement 	<Line: 14-14>(,,L8)
          expression_statement : expression SEMICOLON 	<Line: 14-14>(,,L8)
           expression : variable ASSIGNOP logic_expression 	<Line: 14-14>(,,L8)
            variable : ID 	  	<Line: 14-14>(,,)
             ID : x 	<Line: 14>
            ASSIGNOP : = 	<Line: 14>
            logic_expression : rel_expression 	  	<Line: 14-14>(,,L8)
             rel_expression	: simple_expression  	<Line: 14-14>(,,L8)
              simple_expression : term  	<Line: 14-14>(,,L8)
               term :	unary_expression  	<Line: 14-14>(,,L8)
                unary_expression : factor  	<Line: 14-14>(,,L8)
                 factor : ID LPAREN argument_list RPAREN 	<Line: 14-14>(,,L8)
                  ID : g 	<Line: 14>
                  LPAREN : ( 	<Line: 14>
                  argument_list :  	<Line: 14>
                  RPAREN : ) 	<Line: 14>
           SEMICOLON : ; 	<Line: 14>
        statement : expression_statement 	<Line: 15-15>(,,L7)
         expression_statement : expression SEMICOLON 	<Line: 15-15>(,,L7)
          expression : variable ASSIGNOP logic_expression 	<Line: 15-15>(,,L7)
           variable : ID 	  	<Line: 15-15>(,,)
            ID : y 	<Line: 15>
           ASSIGNOP : = 	<Line: 15>
           logic_expression : rel_expression 	  	<Line: 15-15>(,,L7)
            rel_expression	: simple_expression  	<Line: 15-15>(,,L7)
             simple_expression : term  	<Line: 15-15>(,,L7)
              term :	unary_expression  	<Line: 15-15>(,,L7)
               unary_expression : factor  	<Line: 15-15>(,,L7)
                factor	: variable  	<Line: 15-15>(,,L7)
                 variable : ID 	  	<Line: 15-15>(,,)
                  ID : x 	<Line: 15>
          SEMICOLON : ; 	<Line: 15>
       statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 16-16>(,,L6)
        PRINTLN : println 	<Line: 16>
        LPAREN : ( 	<Line: 16>
        ID : x 	<Line: 16>
        RPAREN : ) 	<Line: 16>
        SEMICOLON : ; 	<Line: 16>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 17-17>(,,L5)
       PRINTLN : println 	<Line: 17>
       LPAREN : ( 	<Line: 17>
       ID : y 	<Line: 17>
       RPAREN : ) 	<Line: 17>
       SEMICOLON : ; 	<Line: 17>
     RCURL : } 	<Line: 18>
