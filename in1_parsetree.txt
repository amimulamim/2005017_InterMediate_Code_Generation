start : program 	<Line: 1-15>
 program : program unit  	<Line: 1-15>
  program : program unit  	<Line: 1-6>
   program : unit  	<Line: 1-5>
    unit : func_definition  	<Line: 1-5>
     func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 1-5>
      type_specifier	: VOID 	<Line: 1-1>
       VOID : void 	<Line: 1>
      ID : f 	<Line: 1>
      LPAREN : ( 	<Line: 1>
      parameter_list  : type_specifier ID 	<Line: 1-1>
       type_specifier	: INT  	<Line: 1-1>
        INT : int 	<Line: 1>
       ID : x 	<Line: 1>
      RPAREN : ) 	<Line: 1>
      compound_statement : LCURL statements RCURL   	<Line: 1-5>
       LCURL : { 	<Line: 1>
       statements : statements statement  	<Line: 2-3>
        statements : statement   	<Line: 2-2>
         statement : expression_statement 	<Line: 2-2>
          expression_statement : expression SEMICOLON 	<Line: 2-2>
           expression : variable ASSIGNOP logic_expression 	<Line: 2-2>
            variable : ID 	  	<Line: 2-2>
             ID : x 	<Line: 2>
            ASSIGNOP : = 	<Line: 2>
            logic_expression : rel_expression 	  	<Line: 2-2>
             rel_expression	: simple_expression  	<Line: 2-2>
              simple_expression : simple_expression ADDOP term   	<Line: 2-2>
               simple_expression : term  	<Line: 2-2>
                term : term MULOP unary_expression 	<Line: 2-2>
                 term :	unary_expression  	<Line: 2-2>
                  unary_expression : factor  	<Line: 2-2>
                   factor	: variable  	<Line: 2-2>
                    variable : ID 	  	<Line: 2-2>
                     ID : x 	<Line: 2>
                 MULOP : * 	<Line: 2>
                 unary_expression : factor  	<Line: 2-2>
                  factor : CONST_INT  	<Line: 2-2>
                   CONST_INT : 3 	<Line: 2>
               ADDOP : + 	<Line: 2>
               term :	unary_expression  	<Line: 2-2>
                unary_expression : factor  	<Line: 2-2>
                 factor : CONST_INT  	<Line: 2-2>
                  CONST_INT : 10 	<Line: 2>
           SEMICOLON : ; 	<Line: 2>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 3-3>
         PRINTLN : println 	<Line: 3>
         LPAREN : ( 	<Line: 3>
         ID : x 	<Line: 3>
         RPAREN : ) 	<Line: 3>
         SEMICOLON : ; 	<Line: 3>
       RCURL : } 	<Line: 5>
   unit : var_declaration   	<Line: 6-6>
    var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 6-6>
     type_specifier	: INT  	<Line: 6-6>
      INT : int 	<Line: 6>
     declaration_list : ID  	<Line: 6-6>
      ID : a 	<Line: 6>
     SEMICOLON : ; 	<Line: 6>
  unit : func_definition  	<Line: 7-15>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 7-15>
    type_specifier	: VOID 	<Line: 7-7>
     VOID : void 	<Line: 7>
    ID : main 	<Line: 7>
    LPAREN : ( 	<Line: 7>
    RPAREN : ) 	<Line: 7>
    compound_statement : LCURL statements RCURL   	<Line: 7-15>
     LCURL : { 	<Line: 7>
     statements : statements statement  	<Line: 8-13>
      statements : statements statement  	<Line: 8-12>
       statements : statements statement  	<Line: 8-11>
        statements : statements statement  	<Line: 8-10>
         statements : statements statement  	<Line: 8-9>
          statements : statement   	<Line: 8-8>
           statement : var_declaration 	<Line: 8-8>
            var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 8-8>
             type_specifier	: INT  	<Line: 8-8>
              INT : int 	<Line: 8>
             declaration_list : ID  	<Line: 8-8>
              ID : c 	<Line: 8>
             SEMICOLON : ; 	<Line: 8>
          statement : expression_statement 	<Line: 9-9>
           expression_statement : expression SEMICOLON 	<Line: 9-9>
            expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
             variable : ID 	  	<Line: 9-9>
              ID : c 	<Line: 9>
             ASSIGNOP : = 	<Line: 9>
             logic_expression : rel_expression 	  	<Line: 9-9>
              rel_expression	: simple_expression  	<Line: 9-9>
               simple_expression : term  	<Line: 9-9>
                term :	unary_expression  	<Line: 9-9>
                 unary_expression : factor  	<Line: 9-9>
                  factor : CONST_INT  	<Line: 9-9>
                   CONST_INT : 17 	<Line: 9>
            SEMICOLON : ; 	<Line: 9>
         statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 10-10>
          PRINTLN : println 	<Line: 10>
          LPAREN : ( 	<Line: 10>
          ID : c 	<Line: 10>
          RPAREN : ) 	<Line: 10>
          SEMICOLON : ; 	<Line: 10>
        statement : expression_statement 	<Line: 11-11>
         expression_statement : expression SEMICOLON 	<Line: 11-11>
          expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
           variable : ID 	  	<Line: 11-11>
            ID : a 	<Line: 11>
           ASSIGNOP : = 	<Line: 11>
           logic_expression : rel_expression 	  	<Line: 11-11>
            rel_expression	: simple_expression  	<Line: 11-11>
             simple_expression : term  	<Line: 11-11>
              term :	unary_expression  	<Line: 11-11>
               unary_expression : factor  	<Line: 11-11>
                factor : CONST_INT  	<Line: 11-11>
                 CONST_INT : 26 	<Line: 11>
          SEMICOLON : ; 	<Line: 11>
       statement : expression_statement 	<Line: 12-12>
        expression_statement : expression SEMICOLON 	<Line: 12-12>
         expression 	: logic_expression	  	<Line: 12-12>
          logic_expression : rel_expression 	  	<Line: 12-12>
           rel_expression	: simple_expression  	<Line: 12-12>
            simple_expression : term  	<Line: 12-12>
             term :	unary_expression  	<Line: 12-12>
              unary_expression : factor  	<Line: 12-12>
               factor : ID LPAREN argument_list RPAREN 	<Line: 12-12>
                ID : f 	<Line: 12>
                LPAREN : ( 	<Line: 12>
                argument_list : arguments 	<Line: 12-12>
                 arguments : logic_expression 	<Line: 12-12>
                  logic_expression : rel_expression 	  	<Line: 12-12>
                   rel_expression	: simple_expression  	<Line: 12-12>
                    simple_expression : term  	<Line: 12-12>
                     term :	unary_expression  	<Line: 12-12>
                      unary_expression : factor  	<Line: 12-12>
                       factor : CONST_INT  	<Line: 12-12>
                        CONST_INT : 13 	<Line: 12>
                RPAREN : ) 	<Line: 12>
         SEMICOLON : ; 	<Line: 12>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>
       PRINTLN : println 	<Line: 13>
       LPAREN : ( 	<Line: 13>
       ID : a 	<Line: 13>
       RPAREN : ) 	<Line: 13>
       SEMICOLON : ; 	<Line: 13>
     RCURL : } 	<Line: 15>
