start : program 	<Line: 2-7>(,,)
 program : unit  	<Line: 2-7>(,,)
  unit : func_definition  	<Line: 2-7>(,,)
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-7>(,,)
    type_specifier	: VOID 	<Line: 2-2>(,,)
     VOID : void 	<Line: 2>
    ID : main 	<Line: 2>
    LPAREN : ( 	<Line: 2>
    RPAREN : ) 	<Line: 2>
    compound_statement : LCURL statements RCURL   	<Line: 2-7>(,,l1)
     LCURL : { 	<Line: 2>
     statements : statements statement  	<Line: 3-5>(,,l1)
      statements : statements statement  	<Line: 3-4>(,,l2)
       statements : statement   	<Line: 3-3>(,,l3)
        statement : var_declaration 	<Line: 3-3>(,,l3)
         var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 3-3>(,,l3)
          type_specifier	: INT  	<Line: 3-3>(,,)
           INT : int 	<Line: 3>
          declaration_list : ID  	<Line: 3-3>(,,)
           ID : x 	<Line: 3>
          SEMICOLON : ; 	<Line: 3>
       statement : expression_statement 	<Line: 4-4>(,,l2)
        expression_statement : expression SEMICOLON 	<Line: 4-4>(,,l2)
         expression : variable ASSIGNOP logic_expression 	<Line: 4-4>(,,l2)
          variable : ID 	  	<Line: 4-4>(,,)
           ID : x 	<Line: 4>
          ASSIGNOP : = 	<Line: 4>
          logic_expression : rel_expression LOGICOP rel_expression  	<Line: 4-4>(,,l2)
           rel_expression	: simple_expression  	<Line: 4-4>(,fall,l2)
            simple_expression : term  	<Line: 4-4>(,fall,l2)
             term :	unary_expression  	<Line: 4-4>(,fall,l2)
              unary_expression : factor  	<Line: 4-4>(,fall,l2)
               factor : LPAREN expression RPAREN 	<Line: 4-4>(,fall,l2)
                LPAREN : ( 	<Line: 4>
                expression 	: logic_expression	  	<Line: 4-4>(,,)
                 logic_expression : rel_expression 	  	<Line: 4-4>(,,)
                  rel_expression : simple_expression RELOP simple_expression 	<Line: 4-4>(,,)
                   simple_expression : term  	<Line: 4-4>(,,)
                    term :	unary_expression  	<Line: 4-4>(,,)
                     unary_expression : factor  	<Line: 4-4>(,,)
                      factor : CONST_INT  	<Line: 4-4>(,,)
                       CONST_INT : 5 	<Line: 4>
                   RELOP : < 	<Line: 4>
                   simple_expression : term  	<Line: 4-4>(,,)
                    term :	unary_expression  	<Line: 4-4>(,,)
                     unary_expression : factor  	<Line: 4-4>(,,)
                      factor : CONST_INT  	<Line: 4-4>(,,)
                       CONST_INT : 10 	<Line: 4>
                RPAREN : ) 	<Line: 4>
           LOGICOP : || 	<Line: 4>
           rel_expression	: simple_expression  	<Line: 4-4>(,,l2)
            simple_expression : term  	<Line: 4-4>(,,l2)
             term :	unary_expression  	<Line: 4-4>(,,l2)
              unary_expression : factor  	<Line: 4-4>(,,l2)
               factor : LPAREN expression RPAREN 	<Line: 4-4>(,,l2)
                LPAREN : ( 	<Line: 4>
                expression 	: logic_expression	  	<Line: 4-4>(,,)
                 logic_expression : rel_expression 	  	<Line: 4-4>(,,)
                  rel_expression : simple_expression RELOP simple_expression 	<Line: 4-4>(,,)
                   simple_expression : term  	<Line: 4-4>(,,)
                    term :	unary_expression  	<Line: 4-4>(,,)
                     unary_expression : factor  	<Line: 4-4>(,,)
                      factor : CONST_INT  	<Line: 4-4>(,,)
                       CONST_INT : 2 	<Line: 4>
                   RELOP : == 	<Line: 4>
                   simple_expression : term  	<Line: 4-4>(,,)
                    term :	unary_expression  	<Line: 4-4>(,,)
                     unary_expression : factor  	<Line: 4-4>(,,)
                      factor : CONST_INT  	<Line: 4-4>(,,)
                       CONST_INT : 3 	<Line: 4>
                RPAREN : ) 	<Line: 4>
         SEMICOLON : ; 	<Line: 4>
      statement : var_declaration 	<Line: 5-5>(,,l1)
       var_declaration : type_specifier declaration_list SEMICOLON   	<Line: 5-5>(,,l1)
        type_specifier	: INT  	<Line: 5-5>(,,)
         INT : int 	<Line: 5>
        declaration_list : ID  	<Line: 5-5>(,,)
         ID : y 	<Line: 5>
        SEMICOLON : ; 	<Line: 5>
     RCURL : } 	<Line: 7>
